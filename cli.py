#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI-—Ç–æ—Ä–≥–æ–≤—ã–º –±–æ—Ç–æ–º
"""

import click
import json
import os
import sys
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from main import AITradingBot

@click.group()
@click.version_option(version='1.0.0', prog_name='AI Trading Bot')
def cli():
    """AI-—Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —Å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º"""
    pass

@cli.command()
@click.option('--config', '-c', default='config/config.yaml', help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
@click.option('--symbols', '-s', multiple=True, default=['SBER', 'GAZP'], help='–¢–æ—Ä–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã')
@click.option('--demo', is_flag=True, help='–î–µ–º–æ —Ä–µ–∂–∏–º (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏)')
def start(config, symbols, demo):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    click.echo("[BOT] –ó–∞–ø—É—Å–∫ AI-—Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")

    if demo:
        click.echo("[WARNING] –î–µ–º–æ —Ä–µ–∂–∏–º: —Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")

    try:
        bot = AITradingBot(config)
        bot.start_trading(list(symbols))
    except KeyboardInterrupt:
        click.echo("\n[STOP] –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

@cli.command()
@click.option('--config', '-c', default='config/config.yaml', help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
@click.option('--symbols', '-s', multiple=True, default=['SBER', 'GAZP'], help='–¢–æ—Ä–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã')
@click.option('--start-date', default='2023-01-01', help='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞')
@click.option('--end-date', default='2023-12-31', help='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è')
def backtest(config, symbols, start_date, end_date):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    click.echo(f"üî¨ –ë—ç–∫—Ç–µ—Å—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}")
    click.echo(f"üìà –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(symbols)}")

    try:
        bot = AITradingBot(config)
        bot.run_backtest(list(symbols), start_date, end_date)
        click.echo("‚úÖ –ë—ç–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ backtest_results/")
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")
        sys.exit(1)

@cli.command()
@click.option('--config', '-c', default='config/config.yaml', help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
@click.option('--symbols', '-s', multiple=True, default=['SBER', 'GAZP'], help='–¢–æ—Ä–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã')
@click.option('--force', is_flag=True, help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ')
def train(config, symbols, force):
    """–û–±—É—á–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏ –ò–ò"""
    click.echo("[AI] –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...")
    click.echo(f"üìä –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(symbols)}")

    if force:
        click.echo("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π")

    try:
        bot = AITradingBot(config)
        bot.load_or_train_models(list(symbols), retrain=force)
        click.echo("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        sys.exit(1)

@cli.command()
@click.option('--config', '-c', default='config/config.yaml', help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
def status(config):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    try:
        bot = AITradingBot(config)
        status_info = bot.get_status()

        click.echo("üìä –°—Ç–∞—Ç—É—Å AI-—Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞:")
        click.echo(json.dumps(status_info, indent=2, ensure_ascii=False))

    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        sys.exit(1)

@cli.command()
@click.option('--config', '-c', default='config/config.yaml', help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
@click.option('--symbols', '-s', multiple=True, default=['SBER'], help='–¢–æ—Ä–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã')
def analyze(config, symbols):
    """–ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞"""
    click.echo(f"üîç –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –¥–ª—è: {', '.join(symbols)}")

    try:
        bot = AITradingBot(config)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if os.path.exists('models'):
            bot.load_or_train_models(list(symbols))

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        results = bot.analyze_market(list(symbols))

        for symbol, analysis in results.items():
            click.echo(f"\nüìà {symbol}:")
            click.echo(f"   –¶–µ–Ω–∞: {analysis['current_price']:.2f}")
            click.echo(f"   –°–∏–≥–Ω–∞–ª: {analysis['signal']}")
            click.echo(f"   RSI: {analysis['technical_indicators']['rsi']:.1f}")

            if analysis['predictions']:
                click.echo("   –ü—Ä–æ–≥–Ω–æ–∑—ã –ò–ò:")
                for model, pred in analysis['predictions'].items():
                    if isinstance(pred, dict):
                        click.echo(f"     {model}: {pred.get('prediction_label', 'N/A')}")
                    else:
                        click.echo(f"     {model}: {pred}")

    except Exception as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        sys.exit(1)

@cli.command()
def setup():
    """–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    click.echo("üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI-—Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")

    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
    folders = ['config', 'logs', 'data', 'models', 'backtest_results']
    for folder in folders:
        os.makedirs(folder, exist_ok=True)
        click.echo(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {folder}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
    if not os.path.exists('.env'):
        click.echo("üìù –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å –≤–∞—à–∏–º–∏ API –∫–ª—é—á–∞–º–∏")
        click.echo("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .env.example –∫–∞–∫ —à–∞–±–ª–æ–Ω")

    click.echo("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    click.echo("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    click.echo("   1. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ .env —Ñ–∞–π–ª —Å–≤–æ–∏–º–∏ API –∫–ª—é—á–∞–º–∏")
    click.echo("   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ config/config.yaml –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã")
    click.echo("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python cli.py train –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π")
    click.echo("   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python cli.py backtest –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    click.echo("   5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python cli.py start --demo –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞")

if __name__ == '__main__':
    cli()
