# src/data/collector_tbank.py
from __future__ import annotations

import pandas as pd
from datetime import datetime, timezone
from typing import List, Optional
from tinkoff.invest import CandleInterval
from src.execution.broker_tbank import TBankBroker
import logging

logger = logging.getLogger(__name__)

def quotation_to_float(quotation) -> float:
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Quotation –≤ float"""
    if quotation is None:
        return 0.0
    return quotation.units + quotation.nano / 1_000_000_000


def candles_to_df(candles) -> pd.DataFrame:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–≤–µ—á–µ–π –≤ pandas DataFrame
    –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö –∏–∑ –∫–Ω–∏–≥–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö
    """
    if not candles:
        return pd.DataFrame()

    rows = []
    for candle in candles:
        row = {
            "time": pd.to_datetime(candle.time, utc=True),
            "open": quotation_to_float(candle.open),
            "high": quotation_to_float(candle.high),
            "low": quotation_to_float(candle.low),
            "close": quotation_to_float(candle.close),
            "volume": candle.volume,
            "is_complete": candle.is_complete,
        }
        rows.append(row)

    df = pd.DataFrame(rows)

    if not df.empty:
        # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–µ–∫—Å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
        df = df.set_index("time").sort_index()

        # –£–±—Ä–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        df = df[~df.index.duplicated(keep='last')]

        logger.info(f"üìä –°–æ–∑–¥–∞–Ω DataFrame: {len(df)} —Å—Ç—Ä–æ–∫, –ø–µ—Ä–∏–æ–¥ —Å {df.index[0]} –ø–æ {df.index[-1]}")

    return df


def load_history(figi: str, days: int = 365, 
                interval: CandleInterval = CandleInterval.CANDLE_INTERVAL_HOUR,
                save_to: Optional[str] = None) -> pd.DataFrame:
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞

    Args:
        figi: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏
        interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π
        save_to: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        DataFrame —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    try:
        logger.info(f"üìà –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö {figi}: {days} –¥–Ω–µ–π, –∏–Ω—Ç–µ—Ä–≤–∞–ª {interval}")

        broker = TBankBroker()
        candles = broker.get_candles(figi=figi, days=days, interval=interval)
        df = candles_to_df(candles)

        if df.empty:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {figi}")
            return df

        # –î–æ–±–∞–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –≤—ã—á–∏—Å–ª—è–µ–º—ã–µ –ø–æ–ª—è
        df = add_basic_features(df)

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å
        if save_to:
            df.to_csv(save_to)
            logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {save_to}")

        return df

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö {figi}: {e}")
        raise


def add_basic_features(df: pd.DataFrame) -> pd.DataFrame:
    """
    –î–æ–±–∞–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–Ω–∏–≥–µ:
    - –î–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    - –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏  
    - –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    - –¢–∏–ø–∏—á–Ω–∞—è —Ü–µ–Ω–∞
    """
    if df.empty:
        return df

    df = df.copy()

    # –î–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (–∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –≤ –∫–Ω–∏–≥–µ –¥–ª—è —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏)
    df['returns'] = df['close'].pct_change()
    df['log_returns'] = (df['close'] / df['close'].shift(1)).apply(lambda x: pd.np.log(x) if x > 0 else 0)

    # –¢–∏–ø–∏—á–Ω–∞—è —Ü–µ–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö)
    df['typical_price'] = (df['high'] + df['low'] + df['close']) / 3

    # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (—Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–µ–π)
    df['volatility'] = df['returns'].rolling(window=20).std()

    # True Range –¥–ª—è ATR
    df['prev_close'] = df['close'].shift(1)
    df['tr1'] = df['high'] - df['low']
    df['tr2'] = abs(df['high'] - df['prev_close'])
    df['tr3'] = abs(df['low'] - df['prev_close'])
    df['true_range'] = df[['tr1', 'tr2', 'tr3']].max(axis=1)

    # –£–±—Ä–∞—Ç—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
    df = df.drop(['prev_close', 'tr1', 'tr2', 'tr3'], axis=1, errors='ignore')

    # –ó–∞–ø–æ–ª–Ω–∏—Ç—å NaN –Ω—É–ª—è–º–∏ –≤ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
    df = df.fillna(0)

    logger.info(f"‚ú® –î–æ–±–∞–≤–ª–µ–Ω—ã –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: returns, log_returns, volatility, true_range")

    return df


def get_multiple_instruments(figis: List[str], days: int = 365,
                           interval: CandleInterval = CandleInterval.CANDLE_INTERVAL_HOUR) -> dict:
    """
    –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    """
    results = {}

    for figi in figis:
        try:
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º {figi}...")
            df = load_history(figi, days=days, interval=interval)
            if not df.empty:
                results[figi] = df
                logger.info(f"‚úÖ {figi}: {len(df)} –∑–∞–ø–∏—Å–µ–π")
            else:
                logger.warning(f"‚ö†Ô∏è {figi}: –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")
        except Exception as e:
            logger.error(f"‚ùå {figi}: –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ - {e}")

    logger.info(f"üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(results)} –∏–∑ {len(figis)}")
    return results


def update_data(existing_file: str, figi: str, 
               interval: CandleInterval = CandleInterval.CANDLE_INTERVAL_HOUR) -> pd.DataFrame:
    """
    –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤—ã–º–∏ —Å–≤–µ—á–∞–º–∏
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π –ø–µ—Ä–∏–æ–¥
    """
    try:
        # –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        df_existing = pd.read_csv(existing_file, parse_dates=['time'], index_col='time')
        last_date = df_existing.index[-1]

        # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
        days_to_add = (datetime.now(timezone.utc) - last_date).days + 1

        if days_to_add <= 1:
            logger.info("üìä –î–∞–Ω–Ω—ã–µ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
            return df_existing

        logger.info(f"üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: –¥–æ–±–∞–≤–ª—è–µ–º {days_to_add} –¥–Ω–µ–π")

        # –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        df_new = load_history(figi, days=days_to_add, interval=interval)

        if df_new.empty:
            logger.warning("‚ö†Ô∏è –ù–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ")
            return df_existing

        # –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        df_combined = pd.concat([df_existing, df_new])
        df_combined = df_combined[~df_combined.index.duplicated(keep='last')]
        df_combined = df_combined.sort_index()

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        df_combined.to_csv(existing_file)

        added_rows = len(df_combined) - len(df_existing)
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_rows} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")

        return df_combined

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ
        return load_history(figi, days=30, interval=interval, save_to=existing_file)


# –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
POPULAR_FIGIS = {
    "SBER": "BBG004730N88",
    "GAZP": "BBG004730RP0", 
    "LKOH": "BBG004731354",
    "YNDX": "BBG00178PGX3",
    "VTBR": "BBG004730ZJ9",
    "NVTK": "BBG004731032",
    "AFLT": "BBG004730JJ5",
    "ALRS": "BBG004730B03",
    "GMKN": "BBG004730RP0",
    "ROSN": "BBG004731354",
}

def get_popular_stocks_data(days: int = 365, 
                          interval: CandleInterval = CandleInterval.CANDLE_INTERVAL_HOUR) -> dict:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–º –∞–∫—Ü–∏—è–º"""
    logger.info("üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–∫—Ü–∏–π...")
    return get_multiple_instruments(list(POPULAR_FIGIS.values()), days=days, interval=interval)


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    import sys

    if len(sys.argv) > 1:
        figi = sys.argv[1]
    else:
        figi = POPULAR_FIGIS["SBER"]

    print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {figi}")

    try:
        df = load_history(figi, days=30, interval=CandleInterval.CANDLE_INTERVAL_HOUR)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
        print(f"üìä –ü–µ—Ä–∏–æ–¥: {df.index[0]} - {df.index[-1]}")
        print(f"üìà –¶–µ–Ω–∞: {df['close'].iloc[0]:.2f} -> {df['close'].iloc[-1]:.2f}")
        print("\nüìã –ü–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π:")
        print(df.head())

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
