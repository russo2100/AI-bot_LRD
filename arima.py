# src/models/arima.py
from __future__ import annotations

import pandas as pd
import numpy as np
from typing import Tuple, Optional, Dict, Any
import logging
from statsmodels.tsa.arima.model import ARIMA
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.seasonal import seasonal_decompose
import warnings

warnings.filterwarnings('ignore')
logger = logging.getLogger(__name__)

class ARIMAModel:
    """
    ARIMA –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤
    –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–æ–¥—Ö–æ–¥—ã –∏–∑ –∫–Ω–∏–≥–∏ "–ò–ò –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ"
    """

    def __init__(self, order: Tuple[int, int, int] = (1, 1, 1)):
        """
        Args:
            order: –ü–æ—Ä—è–¥–æ–∫ ARIMA –º–æ–¥–µ–ª–∏ (p, d, q)
                   p - –∞–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—Å–∏—è, d - –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ, q - —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ
        """
        self.order = order
        self.model = None
        self.fitted_model = None
        self.is_fitted = False
        self.fit_results = {}

    def check_stationarity(self, series: pd.Series, alpha: float = 0.05) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏ —Ä—è–¥–∞ —Å –ø–æ–º–æ—â—å—é —Ç–µ—Å—Ç–∞ –î–∏–∫–∏-–§—É–ª–ª–µ—Ä–∞
        –í–∞–∂–Ω—ã–π —ç—Ç–∞–ø –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–Ω–∏–≥–µ
        """
        try:
            result = adfuller(series.dropna())

            is_stationary = result[1] <= alpha

            return {
                'is_stationary': is_stationary,
                'adf_statistic': result[0],
                'p_value': result[1],
                'critical_values': result[4],
                'recommendation': '–†—è–¥ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–µ–Ω' if is_stationary else f'–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ (d={self.order[1]+1})'
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏: {e}")
            return {'is_stationary': False, 'error': str(e)}

    def make_stationary(self, series: pd.Series, max_diff: int = 2) -> Tuple[pd.Series, int]:
        """
        –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ä—è–¥–∞ –∫ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–º—É –≤–∏–¥—É —á–µ—Ä–µ–∑ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ
        """
        original_series = series.copy()
        diff_order = 0

        for d in range(max_diff + 1):
            stationarity = self.check_stationarity(series)

            if stationarity.get('is_stationary', False):
                logger.info(f"‚úÖ –†—è–¥ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–µ–Ω –ø–æ—Å–ª–µ {d} –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–π")
                return series, d

            if d < max_diff:
                series = series.diff().dropna()
                diff_order = d + 1

        logger.warning(f"‚ö†Ô∏è –†—è–¥ –Ω–µ —Å—Ç–∞–ª —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω—ã–º –ø–æ—Å–ª–µ {max_diff} –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–π")
        return series, diff_order

    def auto_arima(self, series: pd.Series, max_p: int = 5, max_d: int = 2, max_q: int = 5) -> Tuple[int, int, int]:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ARIMA –Ω–∞ –æ—Å–Ω–æ–≤–µ AIC
        """
        logger.info("üîç –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ARIMA...")

        best_aic = np.inf
        best_order = (1, 1, 1)
        best_model = None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è d
        stationarity_result = self.check_stationarity(series)
        if not stationarity_result.get('is_stationary', False):
            _, optimal_d = self.make_stationary(series, max_d)
        else:
            optimal_d = 0

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ d
        d_range = [optimal_d] if optimal_d > 0 else [0, 1]

        total_combinations = len(d_range) * (max_p + 1) * (max_q + 1)
        tested = 0

        for d in d_range:
            for p in range(max_p + 1):
                for q in range(max_q + 1):
                    try:
                        model = ARIMA(series, order=(p, d, q))
                        fitted = model.fit(method_kwargs={"warn_convergence": False})

                        aic = fitted.aic
                        if aic < best_aic:
                            best_aic = aic
                            best_order = (p, d, q)
                            best_model = fitted

                        tested += 1
                        if tested % 10 == 0:
                            logger.info(f"üîÑ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {tested}/{total_combinations} –∫–æ–º–±–∏–Ω–∞—Ü–∏–π")

                    except Exception as e:
                        continue

        logger.info(f"‚úÖ –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ARIMA{best_order} —Å AIC={best_aic:.2f}")
        return best_order

    def fit(self, series: pd.Series, auto_order: bool = False) -> 'ARIMAModel':
        """
        –û–±—É—á–µ–Ω–∏–µ ARIMA –º–æ–¥–µ–ª–∏

        Args:
            series: –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            auto_order: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–±–∏—Ä–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
        """
        try:
            logger.info(f"üéØ –û–±—É—á–µ–Ω–∏–µ ARIMA –º–æ–¥–µ–ª–∏ –Ω–∞ {len(series)} –Ω–∞–±–ª—é–¥–µ–Ω–∏—è—Ö")

            # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            clean_series = series.dropna()
            if len(clean_series) < 10:
                raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(clean_series)} < 10")

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if auto_order:
                self.order = self.auto_arima(clean_series)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏
            stationarity = self.check_stationarity(clean_series)
            logger.info(f"üìä –°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å: {stationarity.get('recommendation', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")

            # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            self.model = ARIMA(clean_series, order=self.order)
            self.fitted_model = self.model.fit(method_kwargs={"warn_convergence": False})

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.fit_results = {
                'aic': self.fitted_model.aic,
                'bic': self.fitted_model.bic,
                'log_likelihood': self.fitted_model.llf,
                'params': self.fitted_model.params.to_dict(),
                'training_samples': len(clean_series),
                'stationarity': stationarity
            }

            self.is_fitted = True
            logger.info(f"‚úÖ ARIMA{self.order} –æ–±—É—á–µ–Ω–∞ (AIC={self.fitted_model.aic:.2f})")

            return self

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è ARIMA: {e}")
            raise

    def predict(self, steps: int = 1, return_conf_int: bool = False, alpha: float = 0.05) -> pd.Series:
        """
        –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤

        Args:
            steps: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
            return_conf_int: –í–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
            alpha: –£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ –¥–ª—è –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        """
        if not self.is_fitted:
            raise ValueError("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞. –í—ã–∑–æ–≤–∏—Ç–µ fit() –ø–µ—Ä–µ–¥ predict()")

        try:
            forecast = self.fitted_model.forecast(steps=steps, alpha=alpha)

            if return_conf_int:
                conf_int = self.fitted_model.get_forecast(steps=steps, alpha=alpha).conf_int()
                return forecast, conf_int

            logger.info(f"üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {steps} —à–∞–≥–æ–≤: {forecast.iloc[0]:.4f}")
            return forecast

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            raise

    def residual_analysis(self) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        """
        if not self.is_fitted:
            raise ValueError("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞")

        try:
            residuals = self.fitted_model.resid

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤
            residual_stats = {
                'mean': residuals.mean(),
                'std': residuals.std(),
                'skewness': residuals.skew(),
                'kurtosis': residuals.kurtosis(),
                'jarque_bera_pvalue': None,  # –¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏
                'ljung_box_pvalue': None,    # –¢–µ—Å—Ç –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
            }

            # –¢–µ—Å—Ç –õ—å—é–Ω–≥–∞-–ë–æ–∫—Å–∞ –Ω–∞ –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –æ—Å—Ç–∞—Ç–∫–æ–≤
            try:
                from statsmodels.stats.diagnostic import acorr_ljungbox
                lb_result = acorr_ljungbox(residuals, lags=min(10, len(residuals)//4), return_df=True)
                residual_stats['ljung_box_pvalue'] = lb_result['lb_pvalue'].iloc[-1]
            except:
                pass

            # –¢–µ—Å—Ç –•–∞—Ä–∫–µ-–ë–µ—Ä–∞ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å
            try:
                from scipy.stats import jarque_bera
                jb_stat, jb_pvalue = jarque_bera(residuals)
                residual_stats['jarque_bera_pvalue'] = jb_pvalue
            except:
                pass

            return residual_stats

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
            return {}

    def get_model_summary(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ –º–æ–¥–µ–ª–∏
        """
        if not self.is_fitted:
            return {"error": "–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞"}

        summary = {
            'order': self.order,
            'fit_results': self.fit_results,
            'residual_analysis': self.residual_analysis(),
            'model_summary': str(self.fitted_model.summary()) if self.fitted_model else None
        }

        return summary

    def save_model(self, filepath: str) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        """
        if not self.is_fitted:
            logger.error("‚ùå –ù–µ—Ç –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return False

        try:
            import pickle

            model_data = {
                'order': self.order,
                'fitted_model': self.fitted_model,
                'fit_results': self.fit_results,
                'is_fitted': self.is_fitted
            }

            with open(filepath, 'wb') as f:
                pickle.dump(model_data, f)

            logger.info(f"üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {filepath}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
            return False

    @classmethod
    def load_model(cls, filepath: str) -> 'ARIMAModel':
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        """
        try:
            import pickle

            with open(filepath, 'rb') as f:
                model_data = pickle.load(f)

            model = cls(order=model_data['order'])
            model.fitted_model = model_data['fitted_model']
            model.fit_results = model_data['fit_results']
            model.is_fitted = model_data['is_fitted']

            logger.info(f"üìÇ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {filepath}")
            return model

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            raise


def decompose_time_series(series: pd.Series, model: str = 'additive', period: int = None) -> Dict[str, pd.Series]:
    """
    –î–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ –Ω–∞ —Ç—Ä–µ–Ω–¥, —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ –æ—Å—Ç–∞—Ç–∫–∏
    """
    try:
        if period is None:
            # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–∏–æ–¥
            period = min(len(series) // 4, 365) if len(series) > 8 else 2

        decomposition = seasonal_decompose(series, model=model, period=period)

        return {
            'trend': decomposition.trend,
            'seasonal': decomposition.seasonal, 
            'residual': decomposition.resid,
            'observed': decomposition.observed
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏: {e}")
        return {}


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ARIMA –º–æ–¥–µ–ª–∏
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ARIMA –º–æ–¥–µ–ª–∏")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ —Å —Ç—Ä–µ–Ω–¥–æ–º –∏ —à—É–º–æ–º
    np.random.seed(42)
    dates = pd.date_range('2023-01-01', periods=200, freq='D')

    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É —Å —Ç—Ä–µ–Ω–¥–æ–º –∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∫–æ–ª–µ–±–∞–Ω–∏—è–º–∏
    trend = np.linspace(100, 120, 200)
    noise = np.random.randn(200) * 2
    seasonal = 5 * np.sin(2 * np.pi * np.arange(200) / 50)  # —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å

    prices = trend + seasonal + noise
    price_series = pd.Series(prices, index=dates, name='price')

    print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–π —Ä—è–¥: {len(price_series)} –Ω–∞–±–ª—é–¥–µ–Ω–∏–π")

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model = ARIMAModel()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç–∏
        stationarity = model.check_stationarity(price_series)
        print(f"üìà –°—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ—Å—Ç—å: {stationarity['recommendation']}")

        # –û–±—É—á–µ–Ω–∏–µ —Å –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        print("üéØ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
        model.fit(price_series, auto_order=True)

        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
        forecast = model.predict(steps=5)
        print(f"üìÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π: {forecast.iloc[0]:.2f}")

        # –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤
        residual_stats = model.residual_analysis()
        print(f"üìä –°—Ä–µ–¥–Ω–µ–µ –æ—Å—Ç–∞—Ç–∫–æ–≤: {residual_stats.get('mean', 0):.4f}")
        print(f"üìä –°—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤: {residual_stats.get('std', 0):.4f}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –º–æ–¥–µ–ª–∏
        summary = model.get_model_summary()
        print(f"üìã AIC: {summary['fit_results']['aic']:.2f}")
        print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {summary['order']}")

        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ARIMA –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
