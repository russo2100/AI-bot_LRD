#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –£–¢–ò–õ–ò–¢–ê–†–ù–´–ô –°–ö–†–ò–ü–¢ –î–õ–Ø AI-–¢–æ—Ä–≥–æ–≤–æ–≥–æ –ë–æ—Ç–∞ T-Bank
–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –∑–∞–¥–∞—á: –Ω–∞—Å—Ç—Ä–æ–π–∫–∞, –¥–∞–Ω–Ω—ã–µ, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–æ–¥–¥–µ—Ä–∂–∫–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python script.py <command> [options]

–ö–æ–º–∞–Ω–¥—ã:
    setup        - –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    data         - –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ (–∑–∞–≥—Ä—É–∑–∫–∞, –æ—á–∏—Å—Ç–∫–∞, –≤–∞–ª–∏–¥–∞—Ü–∏—è)
    validate     - –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    test         - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    optimize     - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    monitor      - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
    backup       - –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    restore      - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    debug        - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ—Ç–ª–∞–¥–∫–∏

–ü—Ä–∏–º–µ—Ä—ã:
    python script.py setup
    python script.py data download --symbols SBER GAZP --days 365
    python script.py data clean --file data/raw/stock_data.csv
    python script.py validate config --path config/settings.py
    python script.py test unit --coverage
    python script.py optimize backtest --strategy ma_crossover
    python script.py monitor system
    python script.py debug logs --tail 50
"""

import sys
import os
import argparse
import subprocess
import shutil
from pathlib import Path
from datetime import datetime
import logging
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))


def load_data_fetcher():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        from data_fetcher import DataFetcher
        return DataFetcher()
    except ImportError as e:
        logger.error(f"DataFetcher –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return None


def load_preprocessor():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        from preprocess import (
            clean_data,
            validate_csv_format,
            load_and_validate_csv,
            clean_data as preprocess_data
        )
        return {
            'clean_data': clean_data,
            'validate_csv_format': validate_csv_format,
            'load_and_validate_csv': load_and_validate_csv,
            'preprocess_data': preprocess_data
        }
    except ImportError as e:
        logger.error(f"Preprocessor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return None


class ScriptRunner:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Å–∫—Ä–∏–ø—Ç–∞"""

    def __init__(self):
        self.data_fetcher = load_data_fetcher()
        self.preprocessor = load_preprocessor()

    def run_setup(self, args):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
        print("üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AI-—Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        directories = [
            "data/raw",
            "data/processed",
            "data/models",
            "config",
            "logs",
            "backtest_results",
            "templates",
            ".github/workflows"
        ]

        for directory in directories:
            Path(directory).mkdir(parents=True, exist_ok=True)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ: {directory}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        required = [".env.example", ".gitignore", "pytest.ini"]
        for file in required:
            if Path(file).exists():
                print(f"‚úÖ –ï—Å—Ç—å: {file}")
            else:
                print(f"‚ö†Ô∏è –ù–µ—Ç: {file}")

        # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if not Path("config/strategies.yaml").exists():
            with open("config/strategies.yaml", 'w') as f:
                f.write("""strategies:
  trendbot_sma_rsi:
    module: strategies.trendbot
    class: SMACrossRSIStrategy
    params:
      fast_sma: 50
      slow_sma: 200
      rsi_period: 14

  basic_ma_crossover:
    module: tbank_strategies
    class: MovingAverageCrossoverStrategy
    params:
      fast_period: 10
      slow_period: 20
""")
            print("‚úÖ –°–æ–∑–¥–∞–Ω: config/strategies.yaml")

        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ API –∫–ª—é—á–∏")
        print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ config/settings.py –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python script.py data download")
        print("4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ: python script.py test unit")

    def run_data_command(self, args):
        """–ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏"""
        if args.subcommand == "download":
            self._data_download(args)
        elif args.subcommand == "clean":
            self._data_clean(args)
        elif args.subcommand == "validate":
            self._data_validate(args)
        elif args.subcommand == "preprocess":
            self._data_preprocess(args)
        else:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞: {args.subcommand}")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ: download, clean, validate, preprocess")

    def _data_download(self, args):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.data_fetcher:
            print("‚ùå DataFetcher –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return

        symbols = getattr(args, 'symbols', ['SBER'])
        days = getattr(args, 'days', 365)

        print(f"üìà –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {symbols} –∑–∞ {days} –¥–Ω–µ–π")

        for symbol in symbols:
            try:
                result = self.data_fetcher.fetch_historical_data(
                    symbol, f"{datetime.now().year - 1}-01-01",
                    datetime.now().strftime("%Y-%m-%d")
                )

                if result:
                    filename = f"data/raw/{symbol}_{days}d.csv"
                    result.to_csv(filename)
                    print(f"‚úÖ {symbol}: {len(result)} –∑–∞–ø–∏—Å–µ–π –≤ {filename}")
                else:
                    print(f"‚ö†Ô∏è {symbol}: –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")

            except Exception as e:
                print(f"‚ùå {symbol}: {e}")

    def _data_clean(self, args):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.preprocessor:
            print("‚ùå Preprocessor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return

        file_path = getattr(args, 'file', None)
        if not file_path:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª: --file data/raw/stock_data.csv")
            return

        if not Path(file_path).exists():
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return

        try:
            print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {file_path}")

            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            df = pd.read_csv(file_path)
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(df)} –∑–∞–ø–∏—Å–µ–π")

            # –û—á–∏—Å—Ç–∫–∞
            cleaned_df = self.preprocessor['clean_data'](df)
            print(f"üìä –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(cleaned_df)} –∑–∞–ø–∏—Å–µ–π")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            cleaned_file = file_path.replace('.csv', '_cleaned.csv')
            cleaned_df.to_csv(cleaned_file, index=False)
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {cleaned_file}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

    def _data_validate(self, args):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        if not self.preprocessor:
            print("‚ùå Preprocessor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return

        file_path = getattr(args, 'file', None)
        if not file_path:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª: --file data/raw/stock_data.csv")
            return

        if not Path(file_path).exists():
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
            return

        try:
            print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è: {file_path}")
            is_valid, errors = self.preprocessor['validate_csv_format'](file_path)

            if is_valid:
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã!")
            else:
                print("‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
                for error in errors:
                    print(f"  - {error}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")

    def _data_preprocess(self, args):
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if not self.preprocessor:
            print("‚ùå Preprocessor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return

        file_path = getattr(args, 'file', None)
        if not file_path:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª: --file data/raw/stock_data.csv")
            return

        print(f"‚ú® –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {file_path}")

        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∞
            is_valid, errors = self.preprocessor['validate_csv_format'](file_path)
            if not is_valid:
                print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã:")
                for error in errors:
                    print(f"  - {error}")
                return

            df, load_errors = self.preprocessor['load_and_validate_csv'](file_path)
            if df is None:
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:")
                for error in load_errors:
                    print(f"  - {error}")
                return

            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(df)} –∑–∞–ø–∏—Å–µ–π")

            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
            from preprocess import create_returns_features, add_lagged_features
            processed_df = create_returns_features(df)
            processed_df = add_lagged_features(processed_df, ['close', 'volume'])

            print(f"üìä –ü–æ—Å–ª–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(processed_df)} –∑–∞–ø–∏—Å–µ–π, {len(processed_df.columns)} –∫–æ–ª–æ–Ω–æ–∫")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            processed_file = file_path.replace('.csv', '_processed.csv')
            processed_df.to_csv(processed_file)
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {processed_file}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

    def run_validate_command(self, args):
        """–ö–æ–º–∞–Ω–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        if args.subcommand == "config":
            self._validate_config(args)
        elif args.subcommand == "data":
            self._validate_data(args)
        else:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞: {args.subcommand}")

    def _validate_config(self, args):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config_path = getattr(args, 'path', 'config/settings.py')

        if not Path(config_path).exists():
            print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
            return

        try:
            print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_path}")

            # –ò–º–ø–æ—Ä—Ç –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            from config.settings import settings

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            issues = []

            if not settings.api.tinkoff_token:
                issues.append("TINKOFF_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω (—Ä–∞–±–æ—Ç–∞ –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ)")

            if settings.api.sandbox:
                issues.append("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Å–æ—á–Ω–∏—Ü–∞ T-Bank API")

            if settings.risk.max_drawdown > 0.5:
                issues.append(".3f")

            if issues:
                print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –∑–∞–º–µ—á–∞–Ω–∏—è:")
                for issue in issues:
                    print(f"  - {issue}")
            else:
                print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞!")

            # –ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            print(f"üéØ –¢–æ—Ä–≥. –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {settings.trading.symbols}")
            print(f"üí∞ –ù–∞—á. –∫–∞–ø–∏—Ç–∞–ª: ${settings.trading.initial_capital}")
            print(f"üìä –ö–æ–º–∏—Å—Å–∏—è: {settings.trading.commission:.3%}")
            print(f"üìà –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {settings.backtest.default_strategy}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    def _validate_data(self, args):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö"""
        file_path = getattr(args, 'file', None)
        if file_path:
            self._data_validate(args)
        else:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª: --file data/processed/stock_data.csv")

    def run_test_command(self, args):
        """–ö–æ–º–∞–Ω–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if args.subcommand == "unit":
            self._run_unit_tests(args)
        elif args.subcommand == "integration":
            self._run_integration_tests(args)
        elif args.subcommand == "all":
            self._run_all_tests(args)
        else:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞: {args.subcommand}")

    def _run_unit_tests(self, args):
        """–ó–∞–ø—É—Å–∫ unit-—Ç–µ—Å—Ç–æ–≤"""
        coverage = getattr(args, 'coverage', False)

        cmd = ["pytest", "tests/", "-v"]
        if coverage:
            cmd.extend(["--cov=.", "--cov-report=term-missing"])

        print("üß™ –ó–∞–ø—É—Å–∫ unit-—Ç–µ—Å—Ç–æ–≤...")
        result = subprocess.run(cmd, cwd=project_root)
        return result.returncode == 0

    def _run_integration_tests(self, args):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üîó –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
        # –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        result = subprocess.run([
            "pytest", "tests/", "-v", "-k", "integration",
            "--cov=.||", "--cov-report=term-missing"
        ], cwd=project_root)
        return result.returncode == 0

    def _run_all_tests(self, args):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤...")
        result = subprocess.run([
            "pytest", "tests/", "-v",
            "--cov=.", "--cov-report=term-missing"
        ], cwd=project_root)
        return result.returncode == 0

    def run_optimize_command(self, args):
        """–ö–æ–º–∞–Ω–¥—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        if args.subcommand == "backtest":
            self._optimize_backtest(args)
        elif args.subcommand == "hyperparams":
            self._optimize_hyperparams(args)
        else:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞: {args.subcommand}")

    def _optimize_backtest(self, args):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —á–µ—Ä–µ–∑ –±—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        strategy = getattr(args, 'strategy', 'ma_crossover')
        print(f"üî¨ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –±—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {strategy}")

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)")

    def _optimize_hyperparams(self, args):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        print("üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å Optuna...")
        print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)")

    def run_monitor_command(self, args):
        """–ö–æ–º–∞–Ω–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if args.subcommand == "system":
            self._monitor_system(args)
        elif args.subcommand == "bot":
            self._monitor_bot(args)
        else:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞: {args.subcommand}")

    def _monitor_system(self, args):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
        print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã...")

        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM
        import psutil
        memory = psutil.virtual_memory()
        print(f"üíæ RAM: {memory.percent}% ({memory.used/1024**3:.1f}GB/{memory.total/1024**3:.1f}GB)")

        # –î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        disk = psutil.disk_usage('/')
        print(f"üíø –î–∏—Å–∫: {disk.percent}% ({disk.used/1024**3:.1f}GB/{disk.total/1024**3:.1f}GB)")

        # CPU
        cpu = psutil.cpu_percent(interval=1)
        print(f"üñ•Ô∏è CPU: {cpu}%")

        # –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
        data_files = list(Path("data").rglob("*.csv"))
        print(f"üìÅ CSV —Ñ–∞–π–ª–æ–≤: {len(data_files)}")
        for file in data_files[:3]:  # –ø–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 3
            size = file.stat().st_size / 1024  # KB
            print(f"  - {file.name}: {size:.1f}KB")

    def _monitor_bot(self, args):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–æ—Ç–∞"""
        print("ü§ñ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–æ—Ç–∞...")

        try:
            from app import TradingBotApp
            bot = TradingBotApp()

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
            status = bot.get_status()
            if status.get('error'):
                print(f"‚ùå {status['error']}")
            else:
                print(f"üìä –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: {status.get('is_running', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"üí∞ –¢—Ä–µ–π–¥–∏–Ω–≥: {status.get('is_trading', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"üéØ –ú–æ–¥–µ–ª–µ–π: {len(status.get('models_loaded', []))}")
                print(f"üìà –ê–Ω–∞–ª–∏–∑: {status.get('last_analysis', '–ù–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è')}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

    def run_debug_command(self, args):
        """–ö–æ–º–∞–Ω–¥—ã –æ—Ç–ª–∞–¥–∫–∏"""
        if args.subcommand == "logs":
            self._debug_logs(args)
        elif args.subcommand == "config":
            self._debug_config(args)
        elif args.subcommand == "data":
            self._debug_data(args)
        else:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞: {args.subcommand}")

    def _debug_logs(self, args):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"""
        lines = getattr(args, 'tail', 20)
        log_file = "trading_bot.log"

        if Path(log_file).exists():
            with open(log_file, 'r', encoding='utf-8') as f:
                content = f.readlines()
                for line in content[-lines:]:
                    print(line.rstrip())
        else:
            print("‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    def _debug_config(self, args):
        """–û—Ç–ª–∞–¥–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("üîß –û—Ç–ª–∞–¥–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

        try:
            from config.settings import settings

            # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            config_dict = {
                'trading': {
                    'symbols': settings.trading.symbols,
                    'initial_capital': settings.trading.initial_capital,
                    'commission': settings.trading.commission
                },
                'api': {
                    'token_set': bool(settings.api.tinkoff_token),
                    'sandbox': settings.api.sandbox
                },
                'risk': {
                    'max_drawdown': settings.risk.max_drawdown,
                    'stop_loss': settings.risk.stop_loss_percent,
                    'take_profit': settings.risk.take_profit_percent
                }
            }

            print(json.dumps(config_dict, indent=2, ensure_ascii=False))

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    def _debug_data(self, args):
        """–û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        data_dir = Path("data")
        if not data_dir.exists():
            print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è data –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return

        print("üíæ –û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
        csv_files = list(data_dir.rglob("*.csv"))
        print(f"üìÅ –í—Å–µ–≥–æ CSV —Ñ–∞–π–ª–æ–≤: {len(csv_files)}")

        for file_path in csv_files:
            try:
                df = pd.read_csv(file_path)
                relative_path = file_path.relative_to(project_root)
                print(f"üìä {relative_path}: {len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
            except Exception as e:
                print(f"‚ùå {file_path}: {e}")


def create_parser():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤"""
    parser = argparse.ArgumentParser(
        description="–£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –£–¢–ò–õ–ò–¢–ê–†–ù–´–ô –°–ö–†–ò–ü–¢ –î–õ–Ø AI-–¢–æ—Ä–≥–æ–≤–æ–≥–æ –ë–æ—Ç–∞ T-Bank",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=__doc__
    )

    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')

    # Setup –∫–æ–º–∞–Ω–¥–∞
    subparsers.add_parser('setup', help='–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞')

    # Data –∫–æ–º–∞–Ω–¥—ã
    data_parser = subparsers.add_parser('data', help='–†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏')
    data_subparsers = data_parser.add_subparsers(dest='subcommand')
    data_subparsers.required = True

    # data download
    download_parser = data_subparsers.add_parser('download', help='–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö')
    download_parser.add_argument('--symbols', '-s', nargs='+', default=['SBER'],
                                help='–¢–æ—Ä–≥–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã')
    download_parser.add_argument('--days', type=int, default=365,
                                help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π')

    # data clean
    clean_parser = data_subparsers.add_parser('clean', help='–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö')
    clean_parser.add_argument('--file', required=True,
                             help='–ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏')

    # data validate
    validate_parser = data_subparsers.add_parser('validate', help='–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö')
    validate_parser.add_argument('--file', required=True,
                                help='–ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏')

    # data preprocess
    preprocess_parser = data_subparsers.add_parser('preprocess', help='–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö')
    preprocess_parser.add_argument('--file', required=True,
                                  help='–ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É –¥–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏')

    # Validate –∫–æ–º–∞–Ω–¥–∞
    validate_cmd_parser = subparsers.add_parser('validate', help='–í–∞–ª–∏–¥–∞—Ü–∏—è')
    validate_subparsers = validate_cmd_parser.add_subparsers(dest='subcommand')
    validate_subparsers.required = True

    # validate config
    config_valid_parser = validate_subparsers.add_parser('config', help='–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    config_valid_parser.add_argument('--path', default='config/settings.py',
                                   help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')

    # validate data
    data_valid_parser = validate_subparsers.add_parser('data', help='–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö')
    data_valid_parser.add_argument('--file', help='–ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É')

    # Test –∫–æ–º–∞–Ω–¥–∞
    test_parser = subparsers.add_parser('test', help='–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤')
    test_subparsers = test_parser.add_subparsers(dest='subcommand')
    test_subparsers.required = True

    test_subparsers.add_parser('unit', help='Unit —Ç–µ—Å—Ç—ã')
    test_subparsers.add_parser('integration', help='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã')
    test_subparsers.add_parser('all', help='–í—Å–µ —Ç–µ—Å—Ç—ã')

    for p in [test_subparsers.choices['unit'], test_subparsers.choices['integration'], test_subparsers.choices['all']]:
        p.add_argument('--coverage', action='store_true',
                      help='–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞')

    # Optimize –∫–æ–º–∞–Ω–¥–∞
    optimize_parser = subparsers.add_parser('optimize', help='–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è')
    optimize_subparsers = optimize_parser.add_subparsers(dest='subcommand')
    optimize_subparsers.required = True

    # optimize backtest
    backtest_opt_parser = optimize_subparsers.add_parser('backtest', help='–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –±—ç–∫—Ç–µ—Å—Ç')
    backtest_opt_parser.add_argument('--strategy', default='ma_crossover',
                                   help='–°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏')

    # optimize hyperparams
    optimize_subparsers.add_parser('hyperparams', help='–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤')

    # Monitor –∫–æ–º–∞–Ω–¥–∞
    monitor_parser = subparsers.add_parser('monitor', help='–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥')
    monitor_subparsers = monitor_parser.add_subparsers(dest='subcommand')
    monitor_subparsers.required = True

    monitor_subparsers.add_parser('system', help='–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã')
    monitor_subparsers.add_parser('bot', help='–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–æ—Ç–∞')

    # Debug –∫–æ–º–∞–Ω–¥–∞
    debug_parser = subparsers.add_parser('debug', help='–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ—Ç–ª–∞–¥–∫–∏')
    debug_subparsers = debug_parser.add_subparsers(dest='subcommand')
    debug_subparsers.required = True

    # debug logs
    logs_debug_parser = debug_subparsers.add_parser('logs', help='–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤')
    logs_debug_parser.add_argument('--tail', type=int, default=20,
                                  help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ —Å –∫–æ–Ω—Ü–∞')

    debug_subparsers.add_parser('config', help='–û—Ç–ª–∞–¥–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    debug_subparsers.add_parser('data', help='–û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö')

    return parser


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = create_parser()
    args = parser.parse_args()

    if not hasattr(args, 'command'):
        parser.print_help()
        return

    runner = ScriptRunner()

    try:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
        if args.command == 'setup':
            runner.run_setup(args)

        elif args.command == 'data':
            runner.run_data_command(args)

        elif args.command == 'validate':
            runner.run_validate_command(args)

        elif args.command == 'test':
            runner.run_test_command(args)

        elif args.command == 'optimize':
            runner.run_optimize_command(args)

        elif args.command == 'monitor':
            runner.run_monitor_command(args)

        elif args.command == 'debug':
            runner.run_debug_command(args)

        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {args.command}")
            parser.print_help()

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()