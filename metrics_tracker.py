# src/monitoring/metrics_tracker.py
from __future__ import annotations

import pandas as pd
import numpy as np
from typing import Dict, Any, List, Optional
import logging
from datetime import datetime, timedelta
import json
import sqlite3
import os

logger = logging.getLogger(__name__)

class MetricsTracker:
    """
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ—Ä–≥–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    """

    def __init__(self, db_path: str = 'data/metrics.db'):
        self.db_path = db_path
        self.current_metrics = {}
        self.alerts = []

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ë–î –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(db_path), exist_ok=True)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self._init_database()

    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                # –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫
                conn.execute("""
                    CREATE TABLE IF NOT EXISTS trades (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        timestamp TEXT NOT NULL,
                        symbol TEXT NOT NULL,
                        action TEXT NOT NULL,
                        quantity REAL NOT NULL,
                        price REAL NOT NULL,
                        pnl REAL,
                        strategy TEXT,
                        created_at TEXT DEFAULT CURRENT_TIMESTAMP
                    )
                """)

                # –¢–∞–±–ª–∏—Ü–∞ –¥–Ω–µ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
                conn.execute("""
                    CREATE TABLE IF NOT EXISTS daily_metrics (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        date TEXT NOT NULL UNIQUE,
                        total_pnl REAL NOT NULL,
                        num_trades INTEGER NOT NULL,
                        win_rate REAL,
                        max_drawdown REAL,
                        sharpe_ratio REAL,
                        portfolio_value REAL,
                        created_at TEXT DEFAULT CURRENT_TIMESTAMP
                    )
                """)

                # –¢–∞–±–ª–∏—Ü–∞ –∞–ª–µ—Ä—Ç–æ–≤
                conn.execute("""
                    CREATE TABLE IF NOT EXISTS alerts (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        timestamp TEXT NOT NULL,
                        alert_type TEXT NOT NULL,
                        message TEXT NOT NULL,
                        severity TEXT DEFAULT 'INFO',
                        acknowledged INTEGER DEFAULT 0,
                        created_at TEXT DEFAULT CURRENT_TIMESTAMP
                    )
                """)

                conn.commit()

            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

    def log_trade(self, trade_info: Dict[str, Any]):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute("""
                    INSERT INTO trades (timestamp, symbol, action, quantity, price, pnl, strategy)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                """, (
                    trade_info.get('timestamp', datetime.now().isoformat()),
                    trade_info.get('symbol', ''),
                    trade_info.get('action', ''),
                    trade_info.get('quantity', 0),
                    trade_info.get('price', 0),
                    trade_info.get('pnl', 0),
                    trade_info.get('strategy', '')
                ))
                conn.commit()

            logger.info(f"üìù –°–¥–µ–ª–∫–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞: {trade_info['action']} {trade_info.get('symbol', '')}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")

    def create_alert(self, alert_type: str, message: str, severity: str = 'INFO'):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"""
        try:
            alert = {
                'timestamp': datetime.now().isoformat(),
                'alert_type': alert_type,
                'message': message,
                'severity': severity
            }

            with sqlite3.connect(self.db_path) as conn:
                conn.execute("""
                    INSERT INTO alerts (timestamp, alert_type, message, severity)
                    VALUES (?, ?, ?, ?)
                """, (alert['timestamp'], alert_type, message, severity))
                conn.commit()

            self.alerts.append(alert)

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
            if severity == 'CRITICAL':
                logger.critical(f"üö® {alert_type}: {message}")
            elif severity == 'WARNING':
                logger.warning(f"‚ö†Ô∏è {alert_type}: {message}")
            else:
                logger.info(f"‚ÑπÔ∏è {alert_type}: {message}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞: {e}")

    def get_performance_summary(self, days: int = 30) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏"""
        try:
            cutoff_date = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%d')

            with sqlite3.connect(self.db_path) as conn:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                metrics_df = pd.read_sql_query("""
                    SELECT * FROM daily_metrics 
                    WHERE date >= ? 
                    ORDER BY date DESC
                """, conn, params=(cutoff_date,))

                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–¥–µ–ª–∫–∏
                trades_df = pd.read_sql_query("""
                    SELECT * FROM trades 
                    WHERE timestamp >= ? 
                    ORDER BY timestamp DESC
                """, conn, params=(cutoff_date,))

            # –†–∞—Å—á–µ—Ç —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            summary = {
                'period_days': days,
                'total_trades': len(trades_df),
            }

            if not metrics_df.empty:
                summary.update({
                    'current_portfolio_value': metrics_df['portfolio_value'].iloc[0] if len(metrics_df) > 0 else 0,
                    'total_pnl': metrics_df['total_pnl'].sum(),
                    'avg_daily_pnl': metrics_df['total_pnl'].mean(),
                })

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–¥–µ–ª–∫–∞–º
            if not trades_df.empty:
                profitable_trades = trades_df[trades_df['pnl'] > 0]
                summary.update({
                    'profitable_trades': len(profitable_trades),
                    'win_rate_trades': len(profitable_trades) / len(trades_df) * 100,
                    'avg_trade_pnl': trades_df['pnl'].mean(),
                })

            return summary

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
            return {}


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞
    tracker = MetricsTracker('test_metrics.db')

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫
    print("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫...")

    test_trade = {
        'timestamp': datetime.now().isoformat(),
        'symbol': 'SBER',
        'action': 'BUY',
        'quantity': 100,
        'price': 250.5,
        'pnl': 0,
        'strategy': 'AI_Strategy'
    }

    tracker.log_trade(test_trade)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏
    print("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    summary = tracker.get_performance_summary(days=1)
    print(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {summary.get('total_trades', 0)}")

    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    import os
    try:
        os.remove('test_metrics.db')
        print("üßπ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
    except:
        pass

    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
