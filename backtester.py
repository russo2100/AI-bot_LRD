# src/backtesting/backtester.py
from __future__ import annotations

import pandas as pd
import numpy as np
from typing import Dict, Any, List, Optional, Tuple
import logging
from datetime import datetime
import json

logger = logging.getLogger(__name__)

class BacktestEngine:
    """
    –î–≤–∏–∂–æ–∫ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–æ–¥—Ö–æ–¥—ã –∏–∑ –∫–Ω–∏–≥–∏ "–ò–ò –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ"
    """

    def __init__(self, initial_capital: float = 100000, commission: float = 0.001):
        """
        Args:
            initial_capital: –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
            commission: –ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Å–¥–µ–ª–∫—É (–¥–æ–ª—è –æ—Ç –æ–±–æ—Ä–æ—Ç–∞)
        """
        self.initial_capital = initial_capital
        self.commission = commission

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        self.capital = initial_capital
        self.position = 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
        self.cash = initial_capital

        # –ò—Å—Ç–æ—Ä–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.trades = []
        self.portfolio_history = []
        self.signals_history = []

        # –ú–µ—Ç—Ä–∏–∫–∏
        self.max_capital = initial_capital
        self.max_drawdown = 0.0

    def run_backtest(self, data: pd.DataFrame, strategy, 
                    start_date: str = None, end_date: str = None) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

        Args:
            data: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            strategy: –¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
            start_date: –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            end_date: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞
        """
        logger.info(f"üî¨ –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ {strategy.name}")

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–∞–º
        test_data = data.copy()
        if start_date:
            test_data = test_data[test_data.index >= start_date]
        if end_date:
            test_data = test_data[test_data.index <= end_date]

        logger.info(f"üìä –ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {test_data.index[0]} - {test_data.index[-1]}")
        logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–∏–æ–¥–æ–≤: {len(test_data)}")

        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self._reset_state()

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
        for i in range(len(test_data)):
            current_timestamp = test_data.index[i]
            current_price = test_data['close'].iloc[i]

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
            if i > 0:  # –ù—É–∂–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
                try:
                    signal = strategy.generate_signal(test_data, i)
                    self._process_signal(signal, current_price, current_timestamp)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ {current_timestamp}: {e}")
                    continue

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
            self._update_portfolio(current_price, current_timestamp)

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        if self.position != 0:
            final_price = test_data['close'].iloc[-1]
            final_timestamp = test_data.index[-1]
            self._close_all_positions(final_price, final_timestamp)

        # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
        results = self._calculate_metrics(test_data)

        logger.info(f"‚úÖ –ë—ç–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Ç–æ–≥–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª: {self.capital:.2f}")
        logger.info(f"üìä –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {((self.capital/self.initial_capital - 1) * 100):.2f}%")

        return results

    def _reset_state(self):
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        self.capital = self.initial_capital
        self.position = 0
        self.cash = self.initial_capital
        self.trades = []
        self.portfolio_history = []
        self.signals_history = []
        self.max_capital = self.initial_capital
        self.max_drawdown = 0.0

    def _process_signal(self, signal, price: float, timestamp):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        from src.strategies.ai_strategies import Signal

        if signal == Signal.BUY and self.position <= 0:
            self._execute_buy_order(price, timestamp)
        elif signal == Signal.SELL and self.position >= 0:
            self._execute_sell_order(price, timestamp)
        # Signal.HOLD - –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ

        self.signals_history.append({
            'timestamp': timestamp,
            'signal': signal.name,
            'price': price,
            'position_before': self.position,
            'cash_before': self.cash
        })

    def _execute_buy_order(self, price: float, timestamp):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É"""
        if self.cash <= 0:
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ü–∏–π
        max_shares = int(self.cash / (price * (1 + self.commission)))

        if max_shares > 0:
            # –ï—Å–ª–∏ —É –Ω–∞—Å –±—ã–ª–∞ –∫–æ—Ä–æ—Ç–∫–∞—è –ø–æ–∑–∏—Ü–∏—è, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ—ë
            if self.position < 0:
                shares_to_cover = min(max_shares, abs(self.position))
                self._cover_short_position(shares_to_cover, price, timestamp)
                max_shares -= shares_to_cover

            # –ü–æ–∫—É–ø–∞–µ–º –∞–∫—Ü–∏–∏, –µ—Å–ª–∏ –µ—â—ë –æ—Å—Ç–∞–ª—Å—è cash
            if max_shares > 0 and self.cash > 0:
                cost = max_shares * price * (1 + self.commission)

                if cost <= self.cash:
                    self.position += max_shares
                    self.cash -= cost

                    trade = {
                        'timestamp': timestamp,
                        'action': 'BUY',
                        'shares': max_shares,
                        'price': price,
                        'cost': cost,
                        'commission': max_shares * price * self.commission,
                        'cash_after': self.cash,
                        'position_after': self.position
                    }
                    self.trades.append(trade)

                    logger.debug(f"üü¢ BUY: {max_shares} –∞–∫—Ü–∏–π –ø–æ {price:.4f}, –æ—Å—Ç–∞–ª–æ—Å—å cash: {self.cash:.2f}")

    def _execute_sell_order(self, price: float, timestamp):
        """–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É"""
        if self.position > 0:
            # –ü—Ä–æ–¥–∞—ë–º –≤—Å–µ –¥–ª–∏–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            self._sell_long_position(self.position, price, timestamp)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–π—Å—è cash
        max_short_shares = int(self.cash / (price * (1 + self.commission)))

        if max_short_shares > 0:
            proceeds = max_short_shares * price * (1 - self.commission)

            self.position -= max_short_shares
            self.cash += proceeds

            trade = {
                'timestamp': timestamp,
                'action': 'SELL_SHORT',
                'shares': max_short_shares,
                'price': price,
                'proceeds': proceeds,
                'commission': max_short_shares * price * self.commission,
                'cash_after': self.cash,
                'position_after': self.position
            }
            self.trades.append(trade)

            logger.debug(f"üî¥ SELL_SHORT: {max_short_shares} –∞–∫—Ü–∏–π –ø–æ {price:.4f}, cash: {self.cash:.2f}")

    def _sell_long_position(self, shares: int, price: float, timestamp):
        """–ü—Ä–æ–¥–∞–∂–∞ –¥–ª–∏–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        proceeds = shares * price * (1 - self.commission)

        self.position -= shares
        self.cash += proceeds

        trade = {
            'timestamp': timestamp,
            'action': 'SELL',
            'shares': shares,
            'price': price,
            'proceeds': proceeds,
            'commission': shares * price * self.commission,
            'cash_after': self.cash,
            'position_after': self.position
        }
        self.trades.append(trade)

    def _cover_short_position(self, shares: int, price: float, timestamp):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏"""
        cost = shares * price * (1 + self.commission)

        self.position += shares
        self.cash -= cost

        trade = {
            'timestamp': timestamp,
            'action': 'COVER',
            'shares': shares,
            'price': price,
            'cost': cost,
            'commission': shares * price * self.commission,
            'cash_after': self.cash,
            'position_after': self.position
        }
        self.trades.append(trade)

    def _close_all_positions(self, price: float, timestamp):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤ –∫–æ–Ω—Ü–µ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        if self.position > 0:
            self._sell_long_position(self.position, price, timestamp)
        elif self.position < 0:
            self._cover_short_position(abs(self.position), price, timestamp)

    def _update_portfolio(self, current_price: float, timestamp):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        portfolio_value = self.cash + self.position * current_price

        portfolio_record = {
            'timestamp': timestamp,
            'price': current_price,
            'cash': self.cash,
            'position': self.position,
            'portfolio_value': portfolio_value,
            'return': (portfolio_value / self.initial_capital - 1) * 100
        }
        self.portfolio_history.append(portfolio_record)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ –∏ –ø—Ä–æ—Å–∞–¥–∫–∏
        if portfolio_value > self.max_capital:
            self.max_capital = portfolio_value

        current_drawdown = (self.max_capital - portfolio_value) / self.max_capital
        if current_drawdown > self.max_drawdown:
            self.max_drawdown = current_drawdown

        self.capital = portfolio_value

    def _calculate_metrics(self, data: pd.DataFrame) -> Dict[str, Any]:
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not self.portfolio_history:
            return {}

        portfolio_df = pd.DataFrame(self.portfolio_history)
        portfolio_df.set_index('timestamp', inplace=True)

        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_return = (self.capital / self.initial_capital - 1) * 100

        # –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å buy-and-hold (–±–µ–Ω—á–º–∞—Ä–∫)
        initial_price = data['close'].iloc[0]
        final_price = data['close'].iloc[-1]
        buy_hold_return = (final_price / initial_price - 1) * 100

        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        returns = portfolio_df['return'].pct_change().dropna()
        volatility = returns.std() * np.sqrt(252) if len(returns) > 1 else 0  # –ê–Ω–Ω—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è

        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞
        risk_free_rate = 0.02  # 2% –≥–æ–¥–æ–≤—ã—Ö
        if volatility > 0:
            sharpe_ratio = (total_return / 100 - risk_free_rate) / (volatility / 100)
        else:
            sharpe_ratio = 0

        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –°–æ—Ä—Ç–∏–Ω–æ
        negative_returns = returns[returns < 0]
        if len(negative_returns) > 0:
            downside_volatility = negative_returns.std() * np.sqrt(252)
            sortino_ratio = (total_return / 100 - risk_free_rate) / (downside_volatility / 100)
        else:
            sortino_ratio = float('inf') if total_return > risk_free_rate * 100 else 0

        # –ú–µ—Ç—Ä–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        num_trades = len(self.trades)

        # –ê–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫
        if num_trades > 0:
            buy_trades = [t for t in self.trades if t['action'] in ['BUY', 'COVER']]
            sell_trades = [t for t in self.trades if t['action'] in ['SELL', 'SELL_SHORT']]

            total_commission = sum(t.get('commission', 0) for t in self.trades)
        else:
            total_commission = 0

        metrics = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            'initial_capital': self.initial_capital,
            'final_capital': self.capital,
            'total_return_pct': total_return,
            'buy_hold_return_pct': buy_hold_return,
            'excess_return_pct': total_return - buy_hold_return,

            # –†–∏—Å–∫–∏
            'max_drawdown_pct': self.max_drawdown * 100,
            'volatility_pct': volatility * 100,
            'sharpe_ratio': sharpe_ratio,
            'sortino_ratio': sortino_ratio,

            # –¢–æ—Ä–≥–æ–≤–ª—è
            'num_trades': num_trades,
            'total_commission': total_commission,
            'commission_pct_of_capital': (total_commission / self.initial_capital) * 100,

            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            'start_date': data.index[0].strftime('%Y-%m-%d'),
            'end_date': data.index[-1].strftime('%Y-%m-%d'),
            'days_tested': len(data),

            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            'portfolio_history': self.portfolio_history,
            'trades': self.trades,
            'signals_history': self.signals_history
        }

        return metrics

    def save_results(self, results: Dict[str, Any], filepath: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            serializable_results = results.copy()

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º pandas timestamp –≤ —Å—Ç—Ä–æ–∫–∏
            if 'portfolio_history' in serializable_results:
                for record in serializable_results['portfolio_history']:
                    if 'timestamp' in record:
                        record['timestamp'] = record['timestamp'].isoformat()

            if 'trades' in serializable_results:
                for trade in serializable_results['trades']:
                    if 'timestamp' in trade:
                        trade['timestamp'] = trade['timestamp'].isoformat()

            if 'signals_history' in serializable_results:
                for signal in serializable_results['signals_history']:
                    if 'timestamp' in signal:
                        signal['timestamp'] = signal['timestamp'].isoformat()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(serializable_results, f, indent=2, ensure_ascii=False)

            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filepath}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")


class WalkForwardAnalysis:
    """
    –ê–Ω–∞–ª–∏–∑ —Å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ–º (Walk-Forward Analysis)
    –í–∞–∂–Ω—ã–π –º–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑ –∫–Ω–∏–≥–∏
    """

    def __init__(self, training_period_months: int = 12, 
                 testing_period_months: int = 1,
                 step_months: int = 1):
        """
        Args:
            training_period_months: –ü–µ—Ä–∏–æ–¥ –æ–±—É—á–µ–Ω–∏—è –≤ –º–µ—Å—è—Ü–∞—Ö
            testing_period_months: –ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –º–µ—Å—è—Ü–∞—Ö  
            step_months: –®–∞–≥ —Å–¥–≤–∏–≥–∞ –≤ –º–µ—Å—è—Ü–∞—Ö
        """
        self.training_period = training_period_months
        self.testing_period = testing_period_months
        self.step_months = step_months

    def run_analysis(self, data: pd.DataFrame, strategy_factory, 
                    initial_capital: float = 100000) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫ Walk-Forward –∞–Ω–∞–ª–∏–∑–∞

        Args:
            data: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            strategy_factory: –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            initial_capital: –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª
        """
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ Walk-Forward –∞–Ω–∞–ª–∏–∑–∞")

        results = {
            'periods': [],
            'total_return': 0,
            'win_rate': 0,
            'avg_monthly_return': 0
        }

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        start_date = data.index[0]
        end_date = data.index[-1]

        current_date = start_date
        period_results = []

        while current_date < end_date:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–±—É—á–∞—é—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            train_start = current_date
            train_end = train_start + pd.DateOffset(months=self.training_period)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
            test_start = train_end
            test_end = test_start + pd.DateOffset(months=self.testing_period)

            if test_end > end_date:
                break

            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            train_data = data[(data.index >= train_start) & (data.index < train_end)]
            test_data = data[(data.index >= test_start) & (data.index < test_end)]

            if len(train_data) < 30 or len(test_data) < 5:
                current_date += pd.DateOffset(months=self.step_months)
                continue

            try:
                # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                strategy = strategy_factory(train_data)

                # –ë—ç–∫—Ç–µ—Å—Ç –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                backtester = BacktestEngine(initial_capital=initial_capital)
                period_result = backtester.run_backtest(test_data, strategy)

                period_info = {
                    'train_start': train_start.strftime('%Y-%m-%d'),
                    'train_end': train_end.strftime('%Y-%m-%d'),
                    'test_start': test_start.strftime('%Y-%m-%d'),
                    'test_end': test_end.strftime('%Y-%m-%d'),
                    'return_pct': period_result.get('total_return_pct', 0),
                    'max_drawdown_pct': period_result.get('max_drawdown_pct', 0),
                    'num_trades': period_result.get('num_trades', 0),
                    'sharpe_ratio': period_result.get('sharpe_ratio', 0)
                }

                period_results.append(period_info)

                logger.info(f"üìä –ü–µ—Ä–∏–æ–¥ {test_start.strftime('%Y-%m')}: {period_info['return_pct']:.2f}%")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–µ {current_date}: {e}")

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–µ—Ä–∏–æ–¥—É
            current_date += pd.DateOffset(months=self.step_months)

        # –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if period_results:
            returns = [p['return_pct'] for p in period_results]

            results.update({
                'periods': period_results,
                'total_periods': len(period_results),
                'total_return': sum(returns),
                'avg_monthly_return': np.mean(returns),
                'win_rate': sum(1 for r in returns if r > 0) / len(returns),
                'best_period': max(returns),
                'worst_period': min(returns),
                'volatility': np.std(returns),
                'sharpe_ratio': np.mean([p['sharpe_ratio'] for p in period_results])
            })

        logger.info(f"‚úÖ Walk-Forward –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {results.get('avg_monthly_return', 0):.2f}%/–º–µ—Å—è—Ü")

        return results


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ç–∫—Ç–µ—Å—Ç–µ—Ä–∞
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    np.random.seed(42)
    dates = pd.date_range('2023-01-01', periods=252, freq='D')  # –ì–æ–¥ —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω–µ–π

    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–µ–Ω—ã
    returns = np.random.randn(252) * 0.02  # 2% –¥–Ω–µ–≤–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    prices = 100 * (1 + returns).cumprod()

    test_data = pd.DataFrame({
        'close': prices,
        'volume': np.random.randint(1000, 10000, 252),
        'rsi': np.random.uniform(20, 80, 252),
    }, index=dates)

    print(f"üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(test_data)} –¥–Ω–µ–π")

    # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
    from src.strategies.ai_strategies import TechnicalStrategy

    strategy = TechnicalStrategy({
        'rsi_buy_threshold': 30,
        'rsi_sell_threshold': 70
    })

    # –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞
    print("üî¨ –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞...")
    backtester = BacktestEngine(initial_capital=100000, commission=0.001)

    try:
        results = backtester.run_backtest(test_data, strategy)

        print(f"‚úÖ –ë—ç–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print(f"üìä –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${results['initial_capital']:,.2f}")
        print(f"üìä –ò—Ç–æ–≥–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${results['final_capital']:,.2f}")
        print(f"üìä –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {results['total_return_pct']:.2f}%")
        print(f"üìä Buy & Hold –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {results['buy_hold_return_pct']:.2f}%")
        print(f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {results['max_drawdown_pct']:.2f}%")
        print(f"üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {results['sharpe_ratio']:.2f}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {results['num_trades']}")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        backtester.save_results(results, 'backtest_results.json')
        print("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ backtest_results.json")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—ç–∫—Ç–µ—Å—Ç–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
