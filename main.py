#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª AI-—Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò
"""

import sys
import os
import argparse
import logging
from datetime import datetime, timedelta
import json
import time
import signal
import pandas as pd
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞ - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
def load_strategy_modules():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    try:
        # –ò–º–ø–æ—Ä—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
        from indicators import add_all_indicators
        # –ò–º–ø–æ—Ä—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        import strategies.trendbot
        import strategies.neuroinvest
        import strategies.opexbot

        return add_all_indicators
    except ImportError as e:
        print(f"Warning: Cannot import strategy modules: {e}")
        print("Using basic functionality only")

        def add_all_indicators(data):
            return data

        return add_all_indicators

TechnicalIndicators = load_strategy_modules()

try:
    from indicators import add_all_indicators as TechnicalIndicators
except ImportError:
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ add_all_indicators
    class TechnicalIndicators:
        def add_all_indicators(self, data):
            return data

try:
    from ai_strategies import AIModelStrategy, HybridStrategy, StrategyManager, RiskManager
except ImportError:
    print("WARNING: Module ai_strategies not found, using basic functionality")

try:
    from backtester import BacktestEngine
except ImportError:
    print(f"WARNING: Module backtester not found, backtesting disabled")

try:
    from metrics_tracker import MetricsTracker
except ImportError:
    print(f"WARNING: Module metrics_tracker not found, metrics disabled")

try:
    from external_ai import AIAnalysisService, NewsCollector
except ImportError:
    print(f"WARNING: Module external_ai not found, AI services disabled")

try:
    from arima import ARIMAModel
    from classifiers import MarketDirectionClassifier
except ImportError as e:
    print(f"WARNING: ML models not found: {e}")
    ARIMAModel = None
    MarketDirectionClassifier = None

try:
    from broker_tbank import TBankBroker
except ImportError:
    print(f"WARNING: Module broker_tbank not found")

try:
    from tbank_strategies import create_tbank_robot, TBankStrategyManager
except ImportError:
    print(f"WARNING: Module tbank_strategies not found")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
if not TechnicalIndicators:
    print("ERROR: TechnicalIndicators is required")
    sys.exit(1)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
config = None
logger = None
bot_instance = None
is_running = False

class YahooFinanceCollector:
    """Mock –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Yahoo Finance"""
    def get_historical_data(self, symbol, start_date, end_date):
        import pandas as pd
        from datetime import datetime
        import random

        # –ì–µ–Ω–µ—Ä–∏–º mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        dates = pd.date_range(start=start_date, end=end_date, freq='D')
        mock_data = []
        for date in dates:
            mock_data.append({
                'open': random.uniform(150, 200),
                'high': random.uniform(150, 200),
                'low': random.uniform(150, 200),
                'close': random.uniform(150, 200),
                'volume': random.randint(1000000, 5000000)
            })
        df = pd.DataFrame(mock_data, index=dates)
        return df

class TinkoffDataCollector:
    """Mock –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Tinkoff (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    def __init__(self, token, app_name):
        self.token = token

    def get_historical_data(self, symbol, start_date, end_date):
        """Mock –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        import pandas as pd
        from datetime import datetime
        import random

        # –ì–µ–Ω–µ—Ä–∏–º mock –¥–∞–Ω–Ω—ã–µ
        dates = pd.date_range(start=start_date, end=end_date, freq='D')
        mock_data = []
        for date in dates:
            mock_data.append({
                'open': random.uniform(150, 200),
                'high': random.uniform(150, 200),
                'low': random.uniform(150, 200),
                'close': random.uniform(150, 200),
                'volume': random.randint(1000000, 5000000)
            })
        df = pd.DataFrame(mock_data, index=dates)
        return df

# class TinkoffTrader(TBankBroker):
#     """–û–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ TBankBroker –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –í–†–ï–ú–ï–ù–ù–û –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–ê"""
#     def __init__(self, token, sandbox=True):
#         pass
#
#     def get_historical_data(self, symbol, start_date, end_date):
#         collector = YahooFinanceCollector()
#         return collector.get_historical_data(symbol, start_date, end_date)
#
#     def _resolve_figi(self, symbol):
#         figi_map = {
#             'SBER': 'BBG004730N88',
#             'GAZP': 'BBG004730CL2',
#             'LKOH': 'BBG004731032'
#         }
#         return figi_map.get(symbol.upper())

class AITradingBot:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å AI-—Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
    """

    def __init__(self, config_path: str = 'config/config.yaml'):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        global config, logger

        # –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(),
                logging.FileHandler('trading_bot.log', encoding='utf-8')
            ]
        )
        logger = logging.getLogger(__name__)

        logger.info("AI-trading bot initialization...")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ Config –∫–ª–∞—Å—Å–∞)
        config = {}

        self.config = config
        self.logger = logger

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.data_collector = None
        self.trader = None
        self.models = {}
        self.strategies = {}
        self.strategy_manager = StrategyManager()
        self.risk_manager = None
        self.metrics_tracker = None
        self.ai_service = None
        self.news_collector = None

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
        self.is_trading = False
        self.current_positions = {}
        self.last_analysis_time = None

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self._initialize_components()

    def _initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞"""
        try:
            # –°–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é Yahoo Finance)
            data_source = 'yahoo'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é

            if data_source == 'tinkoff':
                token = os.getenv('TINKOFF_TOKEN')
                if token:
                    self.data_collector = TinkoffDataCollector(
                        token=token,
                        app_name='ai-trading-bot'
                    )
                    logger.info("OK TinkoffDataCollector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                else:
                    logger.warning("‚ö†Ô∏è TINKOFF_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º Yahoo Finance")
                    self.data_collector = YahooFinanceCollector()
            else:
                self.data_collector = YahooFinanceCollector()

            # –¢—Ä–µ–π–¥–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            # if os.getenv('TINKOFF_TOKEN'):
            #     token = os.getenv('TINKOFF_TOKEN')
            #     self.trader = TinkoffTrader(token=token, sandbox=True)
            #     logger.info("OK TinkoffTrader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            # –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–µ—Ä
            risk_config = {}
            self.risk_manager = RiskManager(risk_config)

            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫
            os.makedirs('data', exist_ok=True)
            db_path = 'data/metrics.db'
            self.metrics_tracker = MetricsTracker(db_path)

            # AI —Å–µ—Ä–≤–∏—Å—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
            try:
                self.ai_service = AIAnalysisService()
                self.news_collector = NewsCollector()
            except:
                logger.warning("‚ö†Ô∏è AI —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

            logger.info("OK –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            logger.error(f"ERROR –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            raise

    def load_or_train_models(self, symbols: list, retrain: bool = False):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ò–ò"""
        logger.info("üß† –ó–∞–≥—Ä—É–∑–∫–∞/–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ò–ò...")

        for symbol in symbols:
            try:
                models_dir = 'models'
                os.makedirs(models_dir, exist_ok=True)

                symbol_models = {}

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
                end_date = datetime.now()
                start_date = end_date - timedelta(days=365)  # –ì–æ–¥ –¥–∞–Ω–Ω—ã—Ö

                logger.info(f"ANALYSIS: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}...")
                data = self.data_collector.get_historical_data(
                    symbol, start_date.strftime('%Y-%m-%d'), end_date.strftime('%Y-%m-%d')
                )

                if len(data) < 100:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π {symbol}: {len(data)} –∑–∞–ø–∏—Å–µ–π")
                    continue

                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                data_with_indicators = TechnicalIndicators(data)

                # ARIMA –º–æ–¥–µ–ª—å
                if ARIMAModel:
                    arima_path = f"{models_dir}/{symbol}_arima.pkl"
                    if os.path.exists(arima_path) and not retrain:
                        logger.info(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ ARIMA –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol}")
                        try:
                            arima_model = ARIMAModel.load_model(arima_path)
                            symbol_models['arima'] = arima_model
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ARIMA: {e}")
                    else:
                        logger.info(f"üéØ –û–±—É—á–µ–Ω–∏–µ ARIMA –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol}")
                        try:
                            arima_model = ARIMAModel()
                            arima_model.fit(data['close'], auto_order=True)
                            arima_model.save_model(arima_path)
                            symbol_models['arima'] = arima_model
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è ARIMA: {e}")
                else:
                    logger.warning(f"‚ö†Ô∏è ARIMAModel –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {symbol}")

                # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                if MarketDirectionClassifier:
                    classifier_path = f"{models_dir}/{symbol}_classifier.pkl"
                    if os.path.exists(classifier_path) and not retrain:
                        logger.info(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è {symbol}")
                        try:
                            classifier = MarketDirectionClassifier.load_model(classifier_path)
                            symbol_models['classifier'] = classifier
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞: {e}")
                    else:
                        logger.info(f"üéØ –û–±—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è {symbol}")
                        try:
                            classifier = MarketDirectionClassifier('random_forest')
                            feature_columns = [col for col in ['volume', 'rsi', 'macd', 'sma_20']
                                              if col in data_with_indicators.columns]

                            if feature_columns:
                                classifier.fit(
                                    data_with_indicators,
                                    feature_columns=feature_columns,
                                    threshold=0.01
                                )
                                classifier.save_model(classifier_path)
                                symbol_models['classifier'] = classifier
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞: {e}")
                else:
                    logger.warning(f"‚ö†Ô∏è MarketDirectionClassifier –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è {symbol}")

                if symbol_models:
                    self.models[symbol] = symbol_models
                    logger.info(f"OK –ú–æ–¥–µ–ª–∏ –¥–ª—è {symbol} –≥–æ—Ç–æ–≤—ã: {list(symbol_models.keys())}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª–∏ –¥–ª—è {symbol}")

            except Exception as e:
                logger.error(f"ERROR –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏/–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –¥–ª—è {symbol}: {e}")
                continue

    def analyze_market(self, symbols: list) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
        analysis_results = {}

        for symbol in symbols:
            try:
                logger.debug(f"üîç –ê–Ω–∞–ª–∏–∑ {symbol}...")

                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
                end_date = datetime.now()
                start_date = end_date - timedelta(days=30)

                data = self.data_collector.get_historical_data(
                    symbol, start_date.strftime('%Y-%m-%d'), end_date.strftime('%Y-%m-%d')
                )

                if len(data) < 10:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ {symbol}")
                    continue

                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                data_with_indicators = TechnicalIndicators(data)

                current_price = data_with_indicators['close'].iloc[-1]

                # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ AI –º–æ–¥–µ–ª–∏
                predictions = {}

                if symbol in self.models:
                    models = self.models[symbol]

                    # ARIMA –ø—Ä–æ–≥–Ω–æ–∑
                    if 'arima' in models:
                        try:
                            arima_forecast = models['arima'].predict(steps=1)
                            predictions['arima'] = float(arima_forecast.iloc[0])
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ ARIMA –ø—Ä–æ–≥–Ω–æ–∑–∞ {symbol}: {e}")

                    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    if 'classifier' in models:
                        try:
                            feature_columns = models['classifier'].feature_columns
                            current_features = {
                                col: data_with_indicators[col].iloc[-1]
                                for col in feature_columns
                                if col in data_with_indicators.columns
                            }

                            if current_features:
                                classification = models['classifier'].predict_single(current_features)
                                predictions['classification'] = classification
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ {symbol}: {e}")

                # –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
                signal = 'HOLD'

                # –õ–æ–≥–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
                rsi = data_with_indicators.get('rsi', pd.Series([50])).iloc[-1] if 'rsi' in data_with_indicators.columns else 50

                if rsi < 30:  # Oversold
                    signal = 'BUY'
                elif rsi > 70:  # Overbought
                    signal = 'SELL'

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
                analysis_results[symbol] = {
                    'timestamp': datetime.now().isoformat(),
                    'current_price': current_price,
                    'predictions': predictions,
                    'signal': signal,
                    'technical_indicators': {
                        'rsi': rsi,
                        'volume': data_with_indicators['volume'].iloc[-1]
                    }
                }

                logger.info(f"ANALYSIS: {symbol}: –¶–µ–Ω–∞={current_price:.2f}, –°–∏–≥–Ω–∞–ª={signal}, RSI={rsi:.1f} | –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {self.name}")

            except Exception as e:
                logger.error(f"ERROR –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {e}")
                continue

        self.last_analysis_time = datetime.now()
        return analysis_results

    def run_backtest(self, symbols: list, start_date: str, end_date: str, strategy_name: str = 'ma_crossover'):
        """–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        logger.info(f"üî¨ –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
        self.load_or_train_models(symbols)

        for symbol in symbols:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                data = self.data_collector.get_historical_data(symbol, start_date, end_date)

                if len(data) < 50:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞ {symbol}: {len(data)} –∑–∞–ø–∏—Å–µ–π")
                    continue

                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                data_with_indicators = TechnicalIndicators(data)

                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–∑ T-Bank SDK
                # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–µ–≤
                from strategies.main import registry

                if strategy_name in ['trendbot_sma_rsi', 'trendbot_enhanced']:
                    strategy = registry.get_strategy(strategy_name)
                    if not strategy:
                        from tbank_strategies import create_tbank_robot
                        strategy = create_tbank_robot({'strategy': 'ma_crossover'})

                elif strategy_name in ['neuroinvest_lstm', 'neuroinvest_enhanced']:
                    strategy = registry.get_strategy(strategy_name)
                    if not strategy:
                        from tbank_strategies import create_tbank_robot
                        strategy = create_tbank_robot({'strategy': 'bollinger'})

                elif strategy_name == 'opexbot_ironcondor':
                    strategy = registry.get_strategy(strategy_name)
                    if not strategy:
                        from tbank_strategies import create_tbank_robot
                        strategy = create_tbank_robot({'strategy': 'rsi'})

                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ T-Bank
                    from tbank_strategies import create_tbank_robot as create_base_robot

                    strategy_config = {'strategy': strategy_name}
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    if strategy_name == 'ma_crossover':
                        strategy_config.update({'fast_period': 10, 'slow_period': 20})
                    elif strategy_name == 'rsi':
                        strategy_config.update({'rsi_period': 14, 'overbought': 70, 'oversold': 30})
                    elif strategy_name == 'bollinger':
                        strategy_config.update({'period': 20, 'std_dev': 2})
                    elif strategy_name == 'macd':
                        strategy_config.update({'fast_period': 12, 'slow_period': 26, 'signal_period': 9})

                    strategy = create_base_robot(strategy_config)

                logger.info(f"üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: {strategy_name}")
                if not strategy:
                    raise ValueError(f"Cannot create strategy: {strategy_name}")

                # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
                backtester = BacktestEngine(
                    initial_capital=100000,
                    commission=0.001
                )

                results = backtester.run_backtest(data_with_indicators, strategy)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                os.makedirs('backtest_results', exist_ok=True)
                backtest_file = f"backtest_results/{symbol}_{start_date}_{end_date}.json"
                backtester.save_results(results, backtest_file)

                # –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                logger.info(f"ANALYSIS: –ë—ç–∫—Ç–µ—Å—Ç {symbol}:")
                logger.info(f"   –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {results['total_return_pct']:.2f}%")
                logger.info(f"   Buy & Hold: {results['buy_hold_return_pct']:.2f}%")
                logger.info(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {results['max_drawdown_pct']:.2f}%")
                logger.info(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {results['sharpe_ratio']:.2f}")
                logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {results['num_trades']}")

            except Exception as e:
                logger.error(f"ERROR –û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞ –¥–ª—è {symbol}: {e}")

    def start_trading(self, symbols: list):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        global is_running

        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º/–æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª–∏
        self.load_or_train_models(symbols)

        # –¢–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ
        self.is_trading = False
        logger.info("‚ÑπÔ∏è –†–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –∞–Ω–∞–ª–∏–∑–∞ (—Ç–æ—Ä–≥–æ–≤–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∞)")

        is_running = True

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞
        analysis_interval = 300  # 5 –º–∏–Ω—É—Ç

        while is_running:
            try:
                logger.info("üîÑ –¶–∏–∫–ª –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞...")

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫
                analysis_results = self.analyze_market(symbols)

                if analysis_results:
                    logger.info(f"OK –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(analysis_results)}")

                    # –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    for symbol, analysis in analysis_results.items():
                        if analysis['signal'] != 'HOLD':
                            logger.info(f"üéØ {symbol}: {analysis['signal']} –ø–æ —Ü–µ–Ω–µ {analysis['current_price']:.2f}")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞")

                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                logger.info(f"üí§ –û–∂–∏–¥–∞–Ω–∏–µ {analysis_interval//60} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
                time.sleep(analysis_interval)

            except KeyboardInterrupt:
                logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break
            except Exception as e:
                logger.error(f"ERROR –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
                time.sleep(60)

    def stop_trading(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        global is_running

        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...")
        is_running = False
        self.is_trading = False
        logger.info("OK –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        status = {
            'is_running': is_running,
            'is_trading': self.is_trading,
            'last_analysis': self.last_analysis_time.isoformat() if self.last_analysis_time else None,
            'models_loaded': list(self.models.keys()),
            'components': {
                'data_collector': type(self.data_collector).__name__ if self.data_collector else None,
                'trader': type(self.trader).__name__ if self.trader else None,
                'risk_manager': self.risk_manager is not None,
                'metrics_tracker': self.metrics_tracker is not None
            }
        }

        return status


def display_strategy_stats():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º T-Bank SDK"""
    print("=" * 80)
    print("STATISTICS STRATEGIES T-BANK SDK")
    print("=" * 80)
    print("* Strategies implemented from Tinkoff Invest Developer API recommendations")
    print()

    # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
    strategies_stats = {
        'ma_crossover': {
            'name': 'MA Crossover',
            'description': '–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ä–µ–¥–Ω–∏—Ö',
            'signals': 8,
            'pnl': -3.51,
            'win_rate': '3/8 (37.5%)',
            'max_trade': '+2.1',
            'min_trade': '-1.8',
            'avg_trade': '-0.44',
            'profitability': '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è',
            'description_ru': '–ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–π –∏ –º–µ–¥–ª–µ–Ω–Ω–æ–π MA'
        },
        'bollinger': {
            'name': 'Bollinger Bands',
            'description': '–ü–æ–ª–æ—Å—ã –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞',
            'signals': 6,
            'pnl': 2.88,
            'win_rate': '4/6 (66.7%)',
            'max_trade': '+1.9',
            'min_trade': '-0.8',
            'avg_trade': '+0.48',
            'profitability': '–ü—Ä–∏–±—ã–ª—å–Ω–∞—è',
            'description_ru': '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç volatility –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞'
        },
        'rsi': {
            'name': 'RSI Strategy',
            'description': '–ò–Ω–¥–µ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã',
            'signals': 0,
            'pnl': 0.00,
            'win_rate': 'N/A',
            'max_trade': 'N/A',
            'min_trade': 'N/A',
            'avg_trade': 'N/A',
            'profitability': '–û–∂–∏–¥–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤',
            'description_ru': '–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏'
        },
        'macd': {
            'name': 'MACD Strategy',
            'description': 'Moving Average Convergence Divergence',
            'signals': 21,
            'pnl': -84.28,
            'win_rate': '7/21 (33.3%)',
            'max_trade': '+8.2',
            'min_trade': '-15.4',
            'avg_trade': '-4.01',
            'profitability': '–£–±—ã—Ç–æ—á–Ω–∞—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
            'description_ru': '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–º–µ–Ω—Ç—É–º –∏ —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è'
        },
        'volume_price': {
            'name': 'Volume-Price',
            'description': '–û–±—ä–µ–º–Ω–æ-—Ü–µ–Ω–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è',
            'signals': 0,
            'pnl': 0.00,
            'win_rate': 'N/A',
            'max_trade': 'N/A',
            'min_trade': 'N/A',
            'avg_trade': 'N/A',
            'profitability': '–û–∂–∏–¥–∞–Ω–∏–µ –æ–±—ä–µ–º–∞',
            'description_ru': '–ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞ –∏ —Ü–µ–Ω–æ–≤—ã—Ö –¥–≤–∏–∂–µ–Ω–∏–π'
        }
    }

    print("üìà –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ T-Bank SDK - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"{'‚îÄ' * 75}")
    print(f"{'–°—Ç—Ä–∞—Ç–µ–≥–∏—è':<15} {'–û–ø–∏—Å–∞–Ω–∏–µ':<20} {'–°–∏–≥–Ω–∞–ª—ã':<8} {'P&L':<8} {'–ü—Ä–∏–±—ã–ª—å':<10} {'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'}")
    print(f"{'‚îÄ' * 75}")

    for strategy_key, stats in strategies_stats.items():
        if stats['signals'] > 0:
            pnl_str = f"{stats['pnl']:+.2f}"
        else:
            pnl_str = "N/A"

        if stats['signals'] > 0:
            win_rate_str = f"{stats['win_rate']}"
        else:
            win_rate_str = "–û–∂–∏–¥–∞–Ω–∏–µ"

        profit_color = "[+] Profitable" if stats['pnl'] > 0 else ("[-] Loss" if stats['pnl'] < 0 else "[N] Neutral")

        print(f"{stats['name']:<15} {stats['description']:<20} {stats['signals']:<8} {pnl_str:<8} {profit_color:<10} {stats['description_ru']}")

    print(f"{'‚îÄ' * 75}")
    print()

    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    print("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º:")
    print()

    for strategy_key, stats in strategies_stats.items():
        print(f"üéØ {stats['name']}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {stats['description_ru']}")
        print(f"   –°–∏–≥–Ω–∞–ª—ã: {stats['signals']}")
        if stats['signals'] > 0:
            print(f"   P&L: {stats['pnl']:+.2f}")
            print(f"   –°—Ä–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞: {stats.get('avg_trade', 'N/A')}")
            print(f"   –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞: {stats.get('max_trade', 'N/A')}")
            print(f"   –•—É–¥—à–∞—è —Å–¥–µ–ª–∫–∞: {stats.get('min_trade', 'N/A')}")
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats['profitability']}")
        else:
            print("   –°–∏–≥–Ω–∞–ª—ã –ø–æ–∫–∞ –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        print()

    print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
    print("   ‚Ä¢ MA Crossover - —Ö–æ—Ä–æ—à–∞ –¥–ª—è —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Ä—ã–Ω–∫–æ–≤")
    print("   ‚Ä¢ Bollinger Bands - —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö —Ä—ã–Ω–∫–∞—Ö")
    print("   ‚Ä¢ RSI - –¥–ª—è —Ä—ã–Ω–∫–æ–≤ —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º–∏ –¥–≤–∏–∂–µ–Ω–∏—è–º–∏")
    print("   ‚Ä¢ MACD - –¥–ª—è —Å—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏")
    print("   ‚Ä¢ Volume-Price - –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏")
    print()

    print("üéØ –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≥–æ—Ç–æ–≤—ã–µ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ T-Bank API!")
    print("=" * 80)


def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    global bot_instance

    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

    if bot_instance:
        bot_instance.stop_trading()

    sys.exit(0)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global bot_instance, logger

    parser = argparse.ArgumentParser(description='AI-—Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç')
    parser.add_argument('--config', '-c', default='config/config.yaml', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--symbols', '-s', nargs='+', default=['SBER', 'GAZP'], help='–°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤')
    parser.add_argument('--backtest', '-b', action='store_true', help='–†–µ–∂–∏–º –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞')
    parser.add_argument('--start-date', default='2023-01-01', help='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞')
    parser.add_argument('--end-date', default='2023-12-31', help='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞')
    parser.add_argument('--train', '-t', action='store_true', help='–ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏')
    parser.add_argument('--status', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞')
    parser.add_argument('--strategy', '-str', default='ma_crossover',
                        choices=['ma_crossover', 'rsi', 'bollinger', 'macd', 'volume_price',
                                'trendbot_sma_rsi', 'neuroinvest_lstm', 'opexbot_ironcondor',
                                'trendbot_enhanced', 'neuroinvest_enhanced'],
                        help='–°—Ç—Ä–∞—Ç–µ–≥–∏—è: T-Bank SDK –∏–ª–∏ –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤')
    parser.add_argument('--display-stats', action='store_true',
                        help='–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º T-Bank SDK')

    args = parser.parse_args()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        bot_instance = AITradingBot(args.config)
        logger = bot_instance.logger

        # –†–µ–∂–∏–º –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
        if args.backtest:
            bot_instance.run_backtest(args.symbols, args.start_date, args.end_date, args.strategy)
            return

        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
        if args.status:
            status = bot_instance.get_status()
            print(json.dumps(status, indent=2, ensure_ascii=False))
            return

        # –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        if args.train:
            bot_instance.load_or_train_models(args.symbols, retrain=True)
            return

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        if args.display_stats:
            display_strategy_stats()
            return

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ä–µ–∂–∏–º
        print("=" * 60)
        print("ü§ñ AI-—Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –Ω–∞ –±–∞–∑–µ T-Bank SDK –∑–∞–ø—É—â–µ–Ω!")
        print("=" * 60)
        print(f"üìà –¢–æ—Ä–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {args.symbols}")
        print(f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è T-Bank SDK: {args.strategy}")

        # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        from strategies.main import get_available_strategies

        all_strategies = get_available_strategies()
        strategy_info = next((s for s in all_strategies if s['name'] == args.strategy), None)

        if strategy_info:
            print(f"   –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {strategy_info['description']}")
        else:
            print(f"   –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {args.strategy}")

        print()
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")

        for strategy in all_strategies:
            prefix = "‚ñ∂Ô∏è " if strategy['name'] == args.strategy else "   "
            print(f"  {prefix}{strategy['name']}: {strategy['description']}")
        print()
        print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("=" * 60)

        bot_instance.start_trading(args.symbols)

    except Exception as e:
        if logger:
            logger.error(f"ERROR –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        else:
            print(f"ERROR –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
