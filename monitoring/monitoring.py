#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã –¥–ª—è AI-—Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ T-Bank
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Prometheus, –∞–ª–µ—Ä—Ç—ã —á–µ—Ä–µ–∑ email –∏ Telegram
"""

import logging
import time
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
import threading
import json
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

import pandas as pd
import psutil
from prometheus_client import (
    CollectorRegistry, Gauge, Counter, Histogram,
    push_to_gateway, generate_latest, REGISTRY
)

from config.settings import settings

logger = logging.getLogger(__name__)


class MetricsCollector:
    """–°–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫ –¥–ª—è Prometheus"""

    def __init__(self):
        self.registry = CollectorRegistry()

        # –¢–æ—Ä–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self.trade_count = Counter(
            'trading_bot_trades_total',
            'Total number of trades executed',
            ['symbol', 'strategy'],
            registry=self.registry
        )

        self.portfolio_value = Gauge(
            'trading_bot_portfolio_value',
            'Current portfolio value',
            registry=self.registry
        )

        self.strategy_performance = Gauge(
            'trading_bot_strategy_performance',
            'Strategy performance metrics',
            ['strategy', 'metric'],
            registry=self.registry
        )

        self.drawdown_current = Gauge(
            'trading_bot_drawdown_current',
            'Current drawdown percentage',
            registry=self.registry
        )

        self.risk_exposure = Gauge(
            'trading_bot_risk_exposure',
            'Current risk exposure',
            registry=self.registry
        )

        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self.cpu_usage = Gauge(
            'trading_bot_cpu_usage',
            'CPU usage percentage',
            registry=self.registry
        )

        self.memory_usage = Gauge(
            'trading_bot_memory_usage',
            'Memory usage percentage',
            registry=self.registry
        )

        self.disk_usage = Gauge(
            'trading_bot_disk_usage',
            'Disk usage percentage',
            registry=self.registry
        )

        # –û—à–∏–±–∫–∏ –∏ —Å–æ–±—ã—Ç–∏—è
        self.errors_total = Counter(
            'trading_bot_errors_total',
            'Total number of errors',
            ['type'],
            registry=self.registry
        )

        self.warnings_total = Counter(
            'trading_bot_warnings_total',
            'Total number of warnings',
            ['type'],
            registry=self.registry
        )

    def update_trading_metrics(self, portfolio_value: float,
                              drawdown: float, risk_exposure: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        self.portfolio_value.set(portfolio_value)
        self.drawdown_current.set(drawdown)
        self.risk_exposure.set(risk_exposure)

    def update_system_metrics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        # CPU –∏ –ø–∞–º—è—Ç—å
        self.cpu_usage.set(psutil.cpu_percent(interval=1))
        self.memory_usage.set(psutil.virtual_memory().percent)

        # –î–∏—Å–∫
        disk = psutil.disk_usage('/')
        self.disk_usage.set(disk.percent)

    def record_trade(self, symbol: str, strategy: str):
        """–ó–∞–ø–∏—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
        self.trade_count.labels(symbol=symbol, strategy=strategy).inc()

    def record_strategy_metric(self, strategy: str, metric: str, value: float):
        """–ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        self.strategy_performance.labels(
            strategy=strategy, metric=metric
        ).set(value)

    def record_error(self, error_type: str):
        """–ó–∞–ø–∏—Å—å –æ—à–∏–±–∫–∏"""
        self.errors_total.labels(type=error_type).inc()

    def record_warning(self, warning_type: str):
        """–ó–∞–ø–∏—Å—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        self.warnings_total.labels(type=warning_type).inc()

    def get_metrics_json(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ"""
        return generate_latest(self.registry).decode('utf-8')


class AlertManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–ª–µ—Ä—Ç–æ–≤"""

    def __init__(self):
        self.alert_history = []
        self.notification_settings = settings.notifications

    def send_alert(self, alert_type: str, message: str, data: dict = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞"""
        alert = {
            'timestamp': datetime.now().isoformat(),
            'type': alert_type,
            'message': message,
            'data': data or {},
            'severity': self._get_alert_severity(alert_type)
        }

        self.alert_history.append(alert)
        logger.warning(f"ALERT [{alert_type}]: {message}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self._send_notification(alert)

    def check_trading_conditions(self, bot_metrics: dict):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤"""
        conditions = [
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞
            lambda: bot_metrics.get('portfolio_value', 0) <
                   settings.trading.initial_capital * 0.5,
            "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –∫–∞–ø–∏—Ç–∞–ª–∞",

            # –í—ã—Å–æ–∫–∏–π drawdown
            lambda: bot_metrics.get('drawdown', 0) > settings.risk.max_drawdown,
            f"Drawdown –ø—Ä–µ–≤—ã—Å–∏–ª {settings.risk.max_drawdown:.1%}",

            # –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞
            lambda: bot_metrics.get('risk_exposure', 0) > 1.0,
            "–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞",

            # –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            lambda: (datetime.now() - bot_metrics.get('last_trade', datetime.now())).total_seconds() > 3600,
            "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ–ª–µ–µ 1 —á–∞—Å–∞",
        ]

        for i in range(0, len(conditions), 2):
            condition_func = conditions[i]
            message = conditions[i+1]

            try:
                if condition_func():
                    self.send_alert('trading_alert', message, bot_metrics)
            except Exception as e:
                logger.error(f"Error checking condition: {e}")

    def _send_notification(self, alert: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ email –∏ Telegram"""
        message = self._format_alert_message(alert)

        # Email –∞–ª–µ—Ä—Ç—ã
        if self.notification_settings.email_enabled:
            self._send_email_alert(alert, message)

        # Telegram –∞–ª–µ—Ä—Ç—ã
        if self.notification_settings.telegram_enabled:
            self._send_telegram_alert(alert, message)

    def _send_email_alert(self, alert: dict, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email –∞–ª–µ—Ä—Ç–∞"""
        try:
            if not all([
                self.notification_settings.email_smtp_server,
                self.notification_settings.email_username,
                self.notification_settings.email_password
            ]):
                logger.warning("Email settings incomplete, skipping email alert")
                return

            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            msg = MIMEMultipart()
            msg['From'] = self.notification_settings.email_username
            msg['To'] = ', '.join(self.notification_settings.email_recipients)
            msg['Subject'] = f'AI Trading Bot Alert: {alert["type"]}'

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            body = f"""
AI Trading Bot Alert
===================

Type: {alert['type']}
Severity: {alert['severity']}
Timestamp: {alert['timestamp']}
Message: {alert['message']}

{alert['data'] and json.dumps(alert['data'], indent=2, ensure_ascii=False) or ''}

===================
This is an automated message from AI Trading Bot monitoring system.
            """

            msg.attach(MIMEText(body, 'plain', 'utf-8'))

            # –û—Ç–ø—Ä–∞–≤–∫–∞
            server = smtplib.SMTP(
                self.notification_settings.email_smtp_server,
                self.notification_settings.email_port
            )
            server.starttls()
            server.login(
                self.notification_settings.email_username,
                self.notification_settings.email_password
            )
            server.send_message(msg)
            server.quit()

            logger.info("Email alert sent successfully")

        except Exception as e:
            logger.error(f"Failed to send email alert: {e}")

    def _send_telegram_alert(self, alert: dict, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ Telegram –∞–ª–µ—Ä—Ç–∞"""
        try:
            if not all([
                self.notification_settings.telegram_bot_token,
                self.notification_settings.telegram_chat_id
            ]):
                logger.warning("Telegram settings incomplete, skipping Telegram alert")
                return

            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ
            # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å python-telegram-bot

            logger.info("Telegram alert sent successfully (stub)")

        except Exception as e:
            logger.error(f"Failed to send Telegram alert: {e}")

    def _format_alert_message(self, alert: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞"""
        return f"""üö® AI Trading Bot Alert

üìä Type: {alert['type']}
‚ö†Ô∏è Severity: {alert['severity']}
üïê Time: {alert['timestamp']}
üìù Message: {alert['message']}

{alert['data'] and f'üìà Data: {json.dumps(alert["data"], ensure_ascii=False)}' or ''}
        """

    def _get_alert_severity(self, alert_type: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏ –∞–ª–µ—Ä—Ç–∞"""
        severity_map = {
            'trading_alert': 'HIGH',
            'system_alert': 'MEDIUM',
            'monitoring_alert': 'LOW',
            'info': 'INFO'
        }
        return severity_map.get(alert_type, 'UNKNOWN')

    def get_alert_history(self, limit: int = 50) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        return self.alert_history[-limit:] if len(self.alert_history) > limit else self.alert_history

    def get_alert_stats(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∞–ª–µ—Ä—Ç–∞–º"""
        if not self.alert_history:
            return {'total': 0, 'by_type': {}, 'by_severity': {}}

        stats = {
            'total': len(self.alert_history),
            'by_type': {},
            'by_severity': {}
        }

        for alert in self.alert_history:
            alert_type = alert['type']
            severity = alert['severity']

            stats['by_type'][alert_type] = stats['by_type'].get(alert_type, 0) + 1
            stats['by_severity'][severity] = stats['by_severity'].get(severity, 0) + 1

        return stats


class MonitoringSystem:
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""

    def __init__(self):
        self.metrics_collector = MetricsCollector()
        self.alert_manager = AlertManager()
        self.is_monitoring = False
        self.monitor_thread = None

        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Prometheus pushgateway
        self.prometheus_gateway = os.getenv('PROMETHEUS_PUSHGATEWAY_URL')

    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if self.is_monitoring:
            logger.info("Monitoring already running")
            return

        self.is_monitoring = True
        self.monitor_thread = threading.Thread(target=self._monitoring_loop, daemon=True)
        self.monitor_thread.start()
        logger.info("Monitoring system started")

    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_monitoring = False
        if self.monitor_thread:
            self.monitor_thread.join(timeout=5)
        logger.info("Monitoring system stopped")

    def _monitoring_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.is_monitoring:
            try:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
                self.metrics_collector.update_system_metrics()

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
                self._check_system_health()

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫ –≤ Prometheus
                if self.prometheus_gateway:
                    self._push_metrics_to_prometheus()

                # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
                time.sleep(60)  # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

            except Exception as e:
                logger.error(f"Error in monitoring loop: {e}")
                self.metrics_collector.record_error('monitoring_loop_error')
                time.sleep(60)

    def _check_system_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU
        cpu_percent = psutil.cpu_percent(interval=1)
        if cpu_percent > 90:
            self.alert_manager.send_alert(
                'system_alert',
                f"High CPU usage: {cpu_percent:.1f}%",
                {'cpu_percent': cpu_percent}
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
        memory = psutil.virtual_memory()
        if memory.percent > 90:
            self.alert_manager.send_alert(
                'system_alert',
                f"High memory usage: {memory.percent:.1f}%",
                {'memory_percent': memory.percent}
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–∞
        disk = psutil.disk_usage('/')
        if disk.percent > 95:
            self.alert_manager.send_alert(
                'system_alert',
                f"Critical disk usage: {disk.percent:.1f}%",
                {'disk_percent': disk.percent}
            )

    def _push_metrics_to_prometheus(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫ –≤ Prometheus Pushgateway"""
        try:
            push_to_gateway(
                self.prometheus_gateway,
                job='ai_trading_bot',
                registry=self.metrics_collector.registry
            )
        except Exception as e:
            logger.error(f"Failed to push metrics to Prometheus: {e}")

    def update_trading_metrics(self, bot_metrics: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        try:
            portfolio_value = bot_metrics.get('portfolio_value', 0)
            drawdown = bot_metrics.get('drawdown', 0)
            risk_exposure = bot_metrics.get('risk_exposure', 0)

            self.metrics_collector.update_trading_metrics(
                portfolio_value, drawdown, risk_exposure
            )

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
            self.alert_manager.check_trading_conditions(bot_metrics)

        except Exception as e:
            logger.error(f"Error updating trading metrics: {e}")

    def record_trade(self, symbol: str, strategy: str):
        """–ó–∞–ø–∏—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
        self.metrics_collector.record_trade(symbol, strategy)
        logger.info(f"Trade recorded: {symbol} via {strategy}")

    def record_stratgy_metric(self, strategy: str, metric: str, value: float):
        """–ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        self.metrics_collector.record_strategy_metric(strategy, metric, value)

    def get_status(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        return {
            'is_monitoring': self.is_monitoring,
            'alert_stats': self.alert_manager.get_alert_stats(),
            'system_metrics': {
                'cpu_usage': psutil.cpu_percent(),
                'memory_usage': psutil.virtual_memory().percent,
                'disk_usage': psutil.disk_usage('/').percent
            },
            'prometheus_enabled': bool(self.prometheus_gateway)
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
monitoring_system = MonitoringSystem()


def start_monitoring():
    """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    monitoring_system.start_monitoring()


def stop_monitoring():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    monitoring_system.stop_monitoring()


def get_monitor_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    return monitoring_system.get_status()